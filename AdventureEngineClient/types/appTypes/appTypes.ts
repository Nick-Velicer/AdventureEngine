//*** CAUTION ***
//This is an autogenerated file produced by generateTypes.py.
//Edits made here will not persist after regeneration.
import { IsEqual } from "type-fest";import { SchemaObject } from "../SchemaObject";
import { Campaign as Base__Campaign } from "../coreTypes/Campaign";
import { Character as Base__Character } from "../coreTypes/Character";
import { CharacterDomainCharacterStatInstance as Base__CharacterDomainCharacterStatInstance } from "../coreTypes/CharacterDomainCharacterStatInstance";
import { ClassPrimaryAbility as Base__ClassPrimaryAbility } from "../coreTypes/ClassPrimaryAbility";
import { ClassSave as Base__ClassSave } from "../coreTypes/ClassSave";
import { ClassSpell as Base__ClassSpell } from "../coreTypes/ClassSpell";
import { DomainAction as Base__DomainAction } from "../coreTypes/DomainAction";
import { DomainCharacterStat as Base__DomainCharacterStat } from "../coreTypes/DomainCharacterStat";
import { DomainClass as Base__DomainClass } from "../coreTypes/DomainClass";
import { DomainCondition as Base__DomainCondition } from "../coreTypes/DomainCondition";
import { DomainCreatureType as Base__DomainCreatureType } from "../coreTypes/DomainCreatureType";
import { DomainDamageType as Base__DomainDamageType } from "../coreTypes/DomainDamageType";
import { DomainDice as Base__DomainDice } from "../coreTypes/DomainDice";
import { DomainDiceRollType as Base__DomainDiceRollType } from "../coreTypes/DomainDiceRollType";
import { DomainItem as Base__DomainItem } from "../coreTypes/DomainItem";
import { DomainSize as Base__DomainSize } from "../coreTypes/DomainSize";
import { DomainSpecies as Base__DomainSpecies } from "../coreTypes/DomainSpecies";
import { DomainSpell as Base__DomainSpell } from "../coreTypes/DomainSpell";
import { DomainSpellSchool as Base__DomainSpellSchool } from "../coreTypes/DomainSpellSchool";
import { DomainStaticEffect as Base__DomainStaticEffect } from "../coreTypes/DomainStaticEffect";
import { DomainSubClass as Base__DomainSubClass } from "../coreTypes/DomainSubClass";
import { Quantifier as Base__Quantifier } from "../coreTypes/Quantifier";

const BaseAppTypes = {
	Campaign: {} as Base__Campaign,
	Character: {} as Base__Character,
	CharacterDomainCharacterStatInstance: {} as Base__CharacterDomainCharacterStatInstance,
	ClassPrimaryAbility: {} as Base__ClassPrimaryAbility,
	ClassSave: {} as Base__ClassSave,
	ClassSpell: {} as Base__ClassSpell,
	DomainAction: {} as Base__DomainAction,
	DomainCharacterStat: {} as Base__DomainCharacterStat,
	DomainClass: {} as Base__DomainClass,
	DomainCondition: {} as Base__DomainCondition,
	DomainCreatureType: {} as Base__DomainCreatureType,
	DomainDamageType: {} as Base__DomainDamageType,
	DomainDice: {} as Base__DomainDice,
	DomainDiceRollType: {} as Base__DomainDiceRollType,
	DomainItem: {} as Base__DomainItem,
	DomainSize: {} as Base__DomainSize,
	DomainSpecies: {} as Base__DomainSpecies,
	DomainSpell: {} as Base__DomainSpell,
	DomainSpellSchool: {} as Base__DomainSpellSchool,
	DomainStaticEffect: {} as Base__DomainStaticEffect,
	DomainSubClass: {} as Base__DomainSubClass,
	Quantifier: {} as Base__Quantifier,
} as const satisfies Record<string, SchemaObject> 


//This prevents any circular relationships from initializing infinitely, even though Typescript
//will allow that sort of type recursion (this mirrors the backend's circular relationship checks)
type RecursionGuardedSchemaObject<T extends SchemaObject, G extends (typeof BaseAppTypes[keyof typeof BaseAppTypes]) = undefined> = IsEqual<G | T, G> extends true? 
	//Circular catch case if the type is in our "seen before" union (with a tuple wrap to interpret the "extends any of the stuff in this union" conditional properly)
	undefined
	:
	{
		Id: T["Id"],
		Attributes: T["Attributes"],
		Relationships: {
			ManyToOne: {[key in keyof T["Relationships"]["ManyToOne"]]: RecursionGuardedSchemaObject<T["Relationships"]["ManyToOne"][key], G extends undefined? T : G | T>},
			//Extra handling to have the circular catch case resolve as undefined instead of undefined[]
			OneToMany: {[key in keyof T["Relationships"]["OneToMany"]]: RecursionGuardedSchemaObject<T["Relationships"]["OneToMany"][key][number], G extends undefined? T : G | T> extends undefined? 
				undefined 
				: 
				RecursionGuardedSchemaObject<T["Relationships"]["OneToMany"][key][number], G extends undefined? T : G | T>[]
			},
		}
	}

export type Campaign = RecursionGuardedSchemaObject<Base__Campaign>;
export type Character = RecursionGuardedSchemaObject<Base__Character>;
export type CharacterDomainCharacterStatInstance = RecursionGuardedSchemaObject<Base__CharacterDomainCharacterStatInstance>;
export type ClassPrimaryAbility = RecursionGuardedSchemaObject<Base__ClassPrimaryAbility>;
export type ClassSave = RecursionGuardedSchemaObject<Base__ClassSave>;
export type ClassSpell = RecursionGuardedSchemaObject<Base__ClassSpell>;
export type DomainAction = RecursionGuardedSchemaObject<Base__DomainAction>;
export type DomainCharacterStat = RecursionGuardedSchemaObject<Base__DomainCharacterStat>;
export type DomainClass = RecursionGuardedSchemaObject<Base__DomainClass>;
export type DomainCondition = RecursionGuardedSchemaObject<Base__DomainCondition>;
export type DomainCreatureType = RecursionGuardedSchemaObject<Base__DomainCreatureType>;
export type DomainDamageType = RecursionGuardedSchemaObject<Base__DomainDamageType>;
export type DomainDice = RecursionGuardedSchemaObject<Base__DomainDice>;
export type DomainDiceRollType = RecursionGuardedSchemaObject<Base__DomainDiceRollType>;
export type DomainItem = RecursionGuardedSchemaObject<Base__DomainItem>;
export type DomainSize = RecursionGuardedSchemaObject<Base__DomainSize>;
export type DomainSpecies = RecursionGuardedSchemaObject<Base__DomainSpecies>;
export type DomainSpell = RecursionGuardedSchemaObject<Base__DomainSpell>;
export type DomainSpellSchool = RecursionGuardedSchemaObject<Base__DomainSpellSchool>;
export type DomainStaticEffect = RecursionGuardedSchemaObject<Base__DomainStaticEffect>;
export type DomainSubClass = RecursionGuardedSchemaObject<Base__DomainSubClass>;
export type Quantifier = RecursionGuardedSchemaObject<Base__Quantifier>;

export const AppTypes = {
	Campaign: {} as Campaign,
	Character: {} as Character,
	CharacterDomainCharacterStatInstance: {} as CharacterDomainCharacterStatInstance,
	ClassPrimaryAbility: {} as ClassPrimaryAbility,
	ClassSave: {} as ClassSave,
	ClassSpell: {} as ClassSpell,
	DomainAction: {} as DomainAction,
	DomainCharacterStat: {} as DomainCharacterStat,
	DomainClass: {} as DomainClass,
	DomainCondition: {} as DomainCondition,
	DomainCreatureType: {} as DomainCreatureType,
	DomainDamageType: {} as DomainDamageType,
	DomainDice: {} as DomainDice,
	DomainDiceRollType: {} as DomainDiceRollType,
	DomainItem: {} as DomainItem,
	DomainSize: {} as DomainSize,
	DomainSpecies: {} as DomainSpecies,
	DomainSpell: {} as DomainSpell,
	DomainSpellSchool: {} as DomainSpellSchool,
	DomainStaticEffect: {} as DomainStaticEffect,
	DomainSubClass: {} as DomainSubClass,
	Quantifier: {} as Quantifier,
} as const satisfies Record<string, SchemaObject> 