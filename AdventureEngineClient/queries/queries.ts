//*** CAUTION ***
//This is an autogenerated file produced by regenerateFrontendQueries.py.
//Edits made here will not persist after regeneration.

import { AppTypes } from "../types/appTypes/appTypes";
import type { SchemaObject } from "../types/SchemaObject";

export type ServiceInterface<T> = {
   getAllItems: () => Promise<Array<T>>
   getItemById: (id: number) => Promise<T>
   saveItem: (item: T) => Promise<T>
}

export type QueryServicesType = {[key in keyof typeof AppTypes]: ServiceInterface<typeof AppTypes[key]>}

export function composeQueryBuilderContext<T extends <G extends SchemaObject>(opts: {
   key: string[],
   query: (...args : any[]) => Promise<G | G[]>
}) => ReturnType<T>>(
   queryHandler: T,
   services: QueryServicesType
) {
   return {
      useGetCampaignsQuery: () => queryHandler({
         key: ["getCampaigns"],
         query: () => services.Campaign.getAllItems()
      }),
      useGetCampaignByIdQuery: (id: number) => {
         //For some reason queries with args does not work without the extra function body/return.
         //Not a huge deal, but apparently a Colada quirk for dynamic-ish queries
         return queryHandler({
            key: ["getCampaignById", id.toString()],
            query: () => services.Campaign.getItemById(id)
         });
      },
      useGetCharactersQuery: () => queryHandler({
         key: ["getCharacters"],
         query: () => services.Character.getAllItems()
      }),
      useGetCharacterByIdQuery: (id: number) => {
         //For some reason queries with args does not work without the extra function body/return.
         //Not a huge deal, but apparently a Colada quirk for dynamic-ish queries
         return queryHandler({
            key: ["getCharacterById", id.toString()],
            query: () => services.Character.getItemById(id)
         });
      },
      useGetCharacterDomainCharacterStatInstancesQuery: () => queryHandler({
         key: ["getCharacterDomainCharacterStatInstances"],
         query: () => services.CharacterDomainCharacterStatInstance.getAllItems()
      }),
      useGetCharacterDomainCharacterStatInstanceByIdQuery: (id: number) => {
         //For some reason queries with args does not work without the extra function body/return.
         //Not a huge deal, but apparently a Colada quirk for dynamic-ish queries
         return queryHandler({
            key: ["getCharacterDomainCharacterStatInstanceById", id.toString()],
            query: () => services.CharacterDomainCharacterStatInstance.getItemById(id)
         });
      },
      useGetClassPrimaryAbilitysQuery: () => queryHandler({
         key: ["getClassPrimaryAbilitys"],
         query: () => services.ClassPrimaryAbility.getAllItems()
      }),
      useGetClassPrimaryAbilityByIdQuery: (id: number) => {
         //For some reason queries with args does not work without the extra function body/return.
         //Not a huge deal, but apparently a Colada quirk for dynamic-ish queries
         return queryHandler({
            key: ["getClassPrimaryAbilityById", id.toString()],
            query: () => services.ClassPrimaryAbility.getItemById(id)
         });
      },
      useGetClassSavesQuery: () => queryHandler({
         key: ["getClassSaves"],
         query: () => services.ClassSave.getAllItems()
      }),
      useGetClassSaveByIdQuery: (id: number) => {
         //For some reason queries with args does not work without the extra function body/return.
         //Not a huge deal, but apparently a Colada quirk for dynamic-ish queries
         return queryHandler({
            key: ["getClassSaveById", id.toString()],
            query: () => services.ClassSave.getItemById(id)
         });
      },
      useGetClassSpellsQuery: () => queryHandler({
         key: ["getClassSpells"],
         query: () => services.ClassSpell.getAllItems()
      }),
      useGetClassSpellByIdQuery: (id: number) => {
         //For some reason queries with args does not work without the extra function body/return.
         //Not a huge deal, but apparently a Colada quirk for dynamic-ish queries
         return queryHandler({
            key: ["getClassSpellById", id.toString()],
            query: () => services.ClassSpell.getItemById(id)
         });
      },
      useGetDomainActionsQuery: () => queryHandler({
         key: ["getDomainActions"],
         query: () => services.DomainAction.getAllItems()
      }),
      useGetDomainActionByIdQuery: (id: number) => {
         //For some reason queries with args does not work without the extra function body/return.
         //Not a huge deal, but apparently a Colada quirk for dynamic-ish queries
         return queryHandler({
            key: ["getDomainActionById", id.toString()],
            query: () => services.DomainAction.getItemById(id)
         });
      },
      useGetDomainCharacterStatsQuery: () => queryHandler({
         key: ["getDomainCharacterStats"],
         query: () => services.DomainCharacterStat.getAllItems()
      }),
      useGetDomainCharacterStatByIdQuery: (id: number) => {
         //For some reason queries with args does not work without the extra function body/return.
         //Not a huge deal, but apparently a Colada quirk for dynamic-ish queries
         return queryHandler({
            key: ["getDomainCharacterStatById", id.toString()],
            query: () => services.DomainCharacterStat.getItemById(id)
         });
      },
      useGetDomainClasssQuery: () => queryHandler({
         key: ["getDomainClasss"],
         query: () => services.DomainClass.getAllItems()
      }),
      useGetDomainClassByIdQuery: (id: number) => {
         //For some reason queries with args does not work without the extra function body/return.
         //Not a huge deal, but apparently a Colada quirk for dynamic-ish queries
         return queryHandler({
            key: ["getDomainClassById", id.toString()],
            query: () => services.DomainClass.getItemById(id)
         });
      },
      useGetDomainConditionsQuery: () => queryHandler({
         key: ["getDomainConditions"],
         query: () => services.DomainCondition.getAllItems()
      }),
      useGetDomainConditionByIdQuery: (id: number) => {
         //For some reason queries with args does not work without the extra function body/return.
         //Not a huge deal, but apparently a Colada quirk for dynamic-ish queries
         return queryHandler({
            key: ["getDomainConditionById", id.toString()],
            query: () => services.DomainCondition.getItemById(id)
         });
      },
      useGetDomainCreatureTypesQuery: () => queryHandler({
         key: ["getDomainCreatureTypes"],
         query: () => services.DomainCreatureType.getAllItems()
      }),
      useGetDomainCreatureTypeByIdQuery: (id: number) => {
         //For some reason queries with args does not work without the extra function body/return.
         //Not a huge deal, but apparently a Colada quirk for dynamic-ish queries
         return queryHandler({
            key: ["getDomainCreatureTypeById", id.toString()],
            query: () => services.DomainCreatureType.getItemById(id)
         });
      },
      useGetDomainDamageTypesQuery: () => queryHandler({
         key: ["getDomainDamageTypes"],
         query: () => services.DomainDamageType.getAllItems()
      }),
      useGetDomainDamageTypeByIdQuery: (id: number) => {
         //For some reason queries with args does not work without the extra function body/return.
         //Not a huge deal, but apparently a Colada quirk for dynamic-ish queries
         return queryHandler({
            key: ["getDomainDamageTypeById", id.toString()],
            query: () => services.DomainDamageType.getItemById(id)
         });
      },
      useGetDomainDicesQuery: () => queryHandler({
         key: ["getDomainDices"],
         query: () => services.DomainDice.getAllItems()
      }),
      useGetDomainDiceByIdQuery: (id: number) => {
         //For some reason queries with args does not work without the extra function body/return.
         //Not a huge deal, but apparently a Colada quirk for dynamic-ish queries
         return queryHandler({
            key: ["getDomainDiceById", id.toString()],
            query: () => services.DomainDice.getItemById(id)
         });
      },
      useGetDomainDiceRollTypesQuery: () => queryHandler({
         key: ["getDomainDiceRollTypes"],
         query: () => services.DomainDiceRollType.getAllItems()
      }),
      useGetDomainDiceRollTypeByIdQuery: (id: number) => {
         //For some reason queries with args does not work without the extra function body/return.
         //Not a huge deal, but apparently a Colada quirk for dynamic-ish queries
         return queryHandler({
            key: ["getDomainDiceRollTypeById", id.toString()],
            query: () => services.DomainDiceRollType.getItemById(id)
         });
      },
      useGetDomainItemsQuery: () => queryHandler({
         key: ["getDomainItems"],
         query: () => services.DomainItem.getAllItems()
      }),
      useGetDomainItemByIdQuery: (id: number) => {
         //For some reason queries with args does not work without the extra function body/return.
         //Not a huge deal, but apparently a Colada quirk for dynamic-ish queries
         return queryHandler({
            key: ["getDomainItemById", id.toString()],
            query: () => services.DomainItem.getItemById(id)
         });
      },
      useGetDomainSizesQuery: () => queryHandler({
         key: ["getDomainSizes"],
         query: () => services.DomainSize.getAllItems()
      }),
      useGetDomainSizeByIdQuery: (id: number) => {
         //For some reason queries with args does not work without the extra function body/return.
         //Not a huge deal, but apparently a Colada quirk for dynamic-ish queries
         return queryHandler({
            key: ["getDomainSizeById", id.toString()],
            query: () => services.DomainSize.getItemById(id)
         });
      },
      useGetDomainSpeciessQuery: () => queryHandler({
         key: ["getDomainSpeciess"],
         query: () => services.DomainSpecies.getAllItems()
      }),
      useGetDomainSpeciesByIdQuery: (id: number) => {
         //For some reason queries with args does not work without the extra function body/return.
         //Not a huge deal, but apparently a Colada quirk for dynamic-ish queries
         return queryHandler({
            key: ["getDomainSpeciesById", id.toString()],
            query: () => services.DomainSpecies.getItemById(id)
         });
      },
      useGetDomainSpellsQuery: () => queryHandler({
         key: ["getDomainSpells"],
         query: () => services.DomainSpell.getAllItems()
      }),
      useGetDomainSpellByIdQuery: (id: number) => {
         //For some reason queries with args does not work without the extra function body/return.
         //Not a huge deal, but apparently a Colada quirk for dynamic-ish queries
         return queryHandler({
            key: ["getDomainSpellById", id.toString()],
            query: () => services.DomainSpell.getItemById(id)
         });
      },
      useGetDomainSpellSchoolsQuery: () => queryHandler({
         key: ["getDomainSpellSchools"],
         query: () => services.DomainSpellSchool.getAllItems()
      }),
      useGetDomainSpellSchoolByIdQuery: (id: number) => {
         //For some reason queries with args does not work without the extra function body/return.
         //Not a huge deal, but apparently a Colada quirk for dynamic-ish queries
         return queryHandler({
            key: ["getDomainSpellSchoolById", id.toString()],
            query: () => services.DomainSpellSchool.getItemById(id)
         });
      },
      useGetDomainStaticEffectsQuery: () => queryHandler({
         key: ["getDomainStaticEffects"],
         query: () => services.DomainStaticEffect.getAllItems()
      }),
      useGetDomainStaticEffectByIdQuery: (id: number) => {
         //For some reason queries with args does not work without the extra function body/return.
         //Not a huge deal, but apparently a Colada quirk for dynamic-ish queries
         return queryHandler({
            key: ["getDomainStaticEffectById", id.toString()],
            query: () => services.DomainStaticEffect.getItemById(id)
         });
      },
      useGetDomainSubClasssQuery: () => queryHandler({
         key: ["getDomainSubClasss"],
         query: () => services.DomainSubClass.getAllItems()
      }),
      useGetDomainSubClassByIdQuery: (id: number) => {
         //For some reason queries with args does not work without the extra function body/return.
         //Not a huge deal, but apparently a Colada quirk for dynamic-ish queries
         return queryHandler({
            key: ["getDomainSubClassById", id.toString()],
            query: () => services.DomainSubClass.getItemById(id)
         });
      },
      useGetQuantifiersQuery: () => queryHandler({
         key: ["getQuantifiers"],
         query: () => services.Quantifier.getAllItems()
      }),
      useGetQuantifierByIdQuery: (id: number) => {
         //For some reason queries with args does not work without the extra function body/return.
         //Not a huge deal, but apparently a Colada quirk for dynamic-ish queries
         return queryHandler({
            key: ["getQuantifierById", id.toString()],
            query: () => services.Quantifier.getItemById(id)
         });
      },
   }
}
