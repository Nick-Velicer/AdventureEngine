//*** CAUTION ***
//This is an autogenerated file produced by regenerateFrontendQueries.py.
//Edits made here will not persist after regeneration.

import { AppTypes } from "../types/appTypes/appTypes";

export type ServiceInterface<T> = {
   getAllItems: () => Promise<Array<T>>
   getItemById: (id: number) => Promise<T>
   saveItem: (item: T) => Promise<T>
}

export type QueryServicesType = {[key in keyof typeof AppTypes]: ServiceInterface<typeof AppTypes[key]>}

export function composeQueryBuilderContext<
   //Type templating
   QueryHandlerType extends <T>(opts: {
      key: string[]
      query: (...args : any[]) => Promise<T>
   //Covering a generic query return, eventually this can be inferred
   }) => () => Record<string, T | any>
>(
   //Arguments/dependencies
   queryHandler: QueryHandlerType,
   services: QueryServicesType
) {
   return {
      createGetCampaignsQuery: () => queryHandler({
         key: ["getCampaigns"],
         query: () => services.Campaign.getAllItems()
      }),
      createGetCampaignByIdQuery: (id: number) => {
         //For some reason queries with args does not work without the extra function body/return.
         //Not a huge deal, but apparently a Colada quirk for dynamic-ish queries
         return queryHandler({
            key: ["getCampaignById", id.toString()],
            query: () => services.Campaign.getItemById(id)
         });
      },
      createGetCharactersQuery: () => queryHandler({
         key: ["getCharacters"],
         query: () => services.Character.getAllItems()
      }),
      createGetCharacterByIdQuery: (id: number) => {
         //For some reason queries with args does not work without the extra function body/return.
         //Not a huge deal, but apparently a Colada quirk for dynamic-ish queries
         return queryHandler({
            key: ["getCharacterById", id.toString()],
            query: () => services.Character.getItemById(id)
         });
      },
      createGetCharacterDomainCharacterStatInstancesQuery: () => queryHandler({
         key: ["getCharacterDomainCharacterStatInstances"],
         query: () => services.CharacterDomainCharacterStatInstance.getAllItems()
      }),
      createGetCharacterDomainCharacterStatInstanceByIdQuery: (id: number) => {
         //For some reason queries with args does not work without the extra function body/return.
         //Not a huge deal, but apparently a Colada quirk for dynamic-ish queries
         return queryHandler({
            key: ["getCharacterDomainCharacterStatInstanceById", id.toString()],
            query: () => services.CharacterDomainCharacterStatInstance.getItemById(id)
         });
      },
      createGetDomainActionsQuery: () => queryHandler({
         key: ["getDomainActions"],
         query: () => services.DomainAction.getAllItems()
      }),
      createGetDomainActionByIdQuery: (id: number) => {
         //For some reason queries with args does not work without the extra function body/return.
         //Not a huge deal, but apparently a Colada quirk for dynamic-ish queries
         return queryHandler({
            key: ["getDomainActionById", id.toString()],
            query: () => services.DomainAction.getItemById(id)
         });
      },
      createGetDomainCharacterStatsQuery: () => queryHandler({
         key: ["getDomainCharacterStats"],
         query: () => services.DomainCharacterStat.getAllItems()
      }),
      createGetDomainCharacterStatByIdQuery: (id: number) => {
         //For some reason queries with args does not work without the extra function body/return.
         //Not a huge deal, but apparently a Colada quirk for dynamic-ish queries
         return queryHandler({
            key: ["getDomainCharacterStatById", id.toString()],
            query: () => services.DomainCharacterStat.getItemById(id)
         });
      },
      createGetDomainClasssQuery: () => queryHandler({
         key: ["getDomainClasss"],
         query: () => services.DomainClass.getAllItems()
      }),
      createGetDomainClassByIdQuery: (id: number) => {
         //For some reason queries with args does not work without the extra function body/return.
         //Not a huge deal, but apparently a Colada quirk for dynamic-ish queries
         return queryHandler({
            key: ["getDomainClassById", id.toString()],
            query: () => services.DomainClass.getItemById(id)
         });
      },
      createGetDomainConditionsQuery: () => queryHandler({
         key: ["getDomainConditions"],
         query: () => services.DomainCondition.getAllItems()
      }),
      createGetDomainConditionByIdQuery: (id: number) => {
         //For some reason queries with args does not work without the extra function body/return.
         //Not a huge deal, but apparently a Colada quirk for dynamic-ish queries
         return queryHandler({
            key: ["getDomainConditionById", id.toString()],
            query: () => services.DomainCondition.getItemById(id)
         });
      },
      createGetDomainCreatureTypesQuery: () => queryHandler({
         key: ["getDomainCreatureTypes"],
         query: () => services.DomainCreatureType.getAllItems()
      }),
      createGetDomainCreatureTypeByIdQuery: (id: number) => {
         //For some reason queries with args does not work without the extra function body/return.
         //Not a huge deal, but apparently a Colada quirk for dynamic-ish queries
         return queryHandler({
            key: ["getDomainCreatureTypeById", id.toString()],
            query: () => services.DomainCreatureType.getItemById(id)
         });
      },
      createGetDomainDamageTypesQuery: () => queryHandler({
         key: ["getDomainDamageTypes"],
         query: () => services.DomainDamageType.getAllItems()
      }),
      createGetDomainDamageTypeByIdQuery: (id: number) => {
         //For some reason queries with args does not work without the extra function body/return.
         //Not a huge deal, but apparently a Colada quirk for dynamic-ish queries
         return queryHandler({
            key: ["getDomainDamageTypeById", id.toString()],
            query: () => services.DomainDamageType.getItemById(id)
         });
      },
      createGetDomainDicesQuery: () => queryHandler({
         key: ["getDomainDices"],
         query: () => services.DomainDice.getAllItems()
      }),
      createGetDomainDiceByIdQuery: (id: number) => {
         //For some reason queries with args does not work without the extra function body/return.
         //Not a huge deal, but apparently a Colada quirk for dynamic-ish queries
         return queryHandler({
            key: ["getDomainDiceById", id.toString()],
            query: () => services.DomainDice.getItemById(id)
         });
      },
      createGetDomainDiceRollTypesQuery: () => queryHandler({
         key: ["getDomainDiceRollTypes"],
         query: () => services.DomainDiceRollType.getAllItems()
      }),
      createGetDomainDiceRollTypeByIdQuery: (id: number) => {
         //For some reason queries with args does not work without the extra function body/return.
         //Not a huge deal, but apparently a Colada quirk for dynamic-ish queries
         return queryHandler({
            key: ["getDomainDiceRollTypeById", id.toString()],
            query: () => services.DomainDiceRollType.getItemById(id)
         });
      },
      createGetDomainItemsQuery: () => queryHandler({
         key: ["getDomainItems"],
         query: () => services.DomainItem.getAllItems()
      }),
      createGetDomainItemByIdQuery: (id: number) => {
         //For some reason queries with args does not work without the extra function body/return.
         //Not a huge deal, but apparently a Colada quirk for dynamic-ish queries
         return queryHandler({
            key: ["getDomainItemById", id.toString()],
            query: () => services.DomainItem.getItemById(id)
         });
      },
      createGetDomainSizesQuery: () => queryHandler({
         key: ["getDomainSizes"],
         query: () => services.DomainSize.getAllItems()
      }),
      createGetDomainSizeByIdQuery: (id: number) => {
         //For some reason queries with args does not work without the extra function body/return.
         //Not a huge deal, but apparently a Colada quirk for dynamic-ish queries
         return queryHandler({
            key: ["getDomainSizeById", id.toString()],
            query: () => services.DomainSize.getItemById(id)
         });
      },
      createGetDomainSpeciessQuery: () => queryHandler({
         key: ["getDomainSpeciess"],
         query: () => services.DomainSpecies.getAllItems()
      }),
      createGetDomainSpeciesByIdQuery: (id: number) => {
         //For some reason queries with args does not work without the extra function body/return.
         //Not a huge deal, but apparently a Colada quirk for dynamic-ish queries
         return queryHandler({
            key: ["getDomainSpeciesById", id.toString()],
            query: () => services.DomainSpecies.getItemById(id)
         });
      },
      createGetDomainSpellsQuery: () => queryHandler({
         key: ["getDomainSpells"],
         query: () => services.DomainSpell.getAllItems()
      }),
      createGetDomainSpellByIdQuery: (id: number) => {
         //For some reason queries with args does not work without the extra function body/return.
         //Not a huge deal, but apparently a Colada quirk for dynamic-ish queries
         return queryHandler({
            key: ["getDomainSpellById", id.toString()],
            query: () => services.DomainSpell.getItemById(id)
         });
      },
      createGetDomainSpellSchoolsQuery: () => queryHandler({
         key: ["getDomainSpellSchools"],
         query: () => services.DomainSpellSchool.getAllItems()
      }),
      createGetDomainSpellSchoolByIdQuery: (id: number) => {
         //For some reason queries with args does not work without the extra function body/return.
         //Not a huge deal, but apparently a Colada quirk for dynamic-ish queries
         return queryHandler({
            key: ["getDomainSpellSchoolById", id.toString()],
            query: () => services.DomainSpellSchool.getItemById(id)
         });
      },
      createGetDomainStaticEffectsQuery: () => queryHandler({
         key: ["getDomainStaticEffects"],
         query: () => services.DomainStaticEffect.getAllItems()
      }),
      createGetDomainStaticEffectByIdQuery: (id: number) => {
         //For some reason queries with args does not work without the extra function body/return.
         //Not a huge deal, but apparently a Colada quirk for dynamic-ish queries
         return queryHandler({
            key: ["getDomainStaticEffectById", id.toString()],
            query: () => services.DomainStaticEffect.getItemById(id)
         });
      },
      createGetDomainSubClasssQuery: () => queryHandler({
         key: ["getDomainSubClasss"],
         query: () => services.DomainSubClass.getAllItems()
      }),
      createGetDomainSubClassByIdQuery: (id: number) => {
         //For some reason queries with args does not work without the extra function body/return.
         //Not a huge deal, but apparently a Colada quirk for dynamic-ish queries
         return queryHandler({
            key: ["getDomainSubClassById", id.toString()],
            query: () => services.DomainSubClass.getItemById(id)
         });
      },
      createGetQuantifiersQuery: () => queryHandler({
         key: ["getQuantifiers"],
         query: () => services.Quantifier.getAllItems()
      }),
      createGetQuantifierByIdQuery: (id: number) => {
         //For some reason queries with args does not work without the extra function body/return.
         //Not a huge deal, but apparently a Colada quirk for dynamic-ish queries
         return queryHandler({
            key: ["getQuantifierById", id.toString()],
            query: () => services.Quantifier.getItemById(id)
         });
      },
   }
}
