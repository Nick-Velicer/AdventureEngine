//*** CAUTION ***
//This is an autogenerated file produced by regenerateFrontendQueries.py.
//Edits made here will not persist after regeneration.

import { AppTypes } from "../types/appTypes/appTypes";

export type ServiceInterface<T> = {
   getAllItems: () => Promise<Array<T>>
   getItemById: (id: number) => Promise<T>
   saveItem: (item: T) => Promise<T>
}

export type QueryServicesType = {[key in keyof typeof AppTypes]: ServiceInterface<typeof AppTypes[key]>}

export function composeQueryContext<
   //Type templating
   QueryHandlerType extends <T>(opts: {
      key: string[]
      query: (...args : any[]) => Promise<T>
   //Covering a generic query return, eventually this can be inferred
   }) => () => Record<string, T | any>
>(
   //Arguments/dependencies
   queryHandler: QueryHandlerType,
   services: QueryServicesType
) {
   return {
      queryCampaigns: queryHandler({
         key: ["Campaigns"],
         query: () => services.Campaign.getAllItems()
      }),
      queryCampaignsById: queryHandler({
         key: ["getCampaignById"],
         query: () => services.Campaign.getItemById(1)
      }),
      queryCharacters: queryHandler({
         key: ["Characters"],
         query: () => services.Character.getAllItems()
      }),
      queryCharactersById: queryHandler({
         key: ["getCharacterById"],
         query: () => services.Character.getItemById(1)
      }),
      queryCharacterDomainCharacterStatInstances: queryHandler({
         key: ["CharacterDomainCharacterStatInstances"],
         query: () => services.CharacterDomainCharacterStatInstance.getAllItems()
      }),
      queryCharacterDomainCharacterStatInstancesById: queryHandler({
         key: ["getCharacterDomainCharacterStatInstanceById"],
         query: () => services.CharacterDomainCharacterStatInstance.getItemById(1)
      }),
      queryDomainActions: queryHandler({
         key: ["DomainActions"],
         query: () => services.DomainAction.getAllItems()
      }),
      queryDomainActionsById: queryHandler({
         key: ["getDomainActionById"],
         query: () => services.DomainAction.getItemById(1)
      }),
      queryDomainCharacterStats: queryHandler({
         key: ["DomainCharacterStats"],
         query: () => services.DomainCharacterStat.getAllItems()
      }),
      queryDomainCharacterStatsById: queryHandler({
         key: ["getDomainCharacterStatById"],
         query: () => services.DomainCharacterStat.getItemById(1)
      }),
      queryDomainClasss: queryHandler({
         key: ["DomainClasss"],
         query: () => services.DomainClass.getAllItems()
      }),
      queryDomainClasssById: queryHandler({
         key: ["getDomainClassById"],
         query: () => services.DomainClass.getItemById(1)
      }),
      queryDomainConditions: queryHandler({
         key: ["DomainConditions"],
         query: () => services.DomainCondition.getAllItems()
      }),
      queryDomainConditionsById: queryHandler({
         key: ["getDomainConditionById"],
         query: () => services.DomainCondition.getItemById(1)
      }),
      queryDomainCreatureTypes: queryHandler({
         key: ["DomainCreatureTypes"],
         query: () => services.DomainCreatureType.getAllItems()
      }),
      queryDomainCreatureTypesById: queryHandler({
         key: ["getDomainCreatureTypeById"],
         query: () => services.DomainCreatureType.getItemById(1)
      }),
      queryDomainDamageTypes: queryHandler({
         key: ["DomainDamageTypes"],
         query: () => services.DomainDamageType.getAllItems()
      }),
      queryDomainDamageTypesById: queryHandler({
         key: ["getDomainDamageTypeById"],
         query: () => services.DomainDamageType.getItemById(1)
      }),
      queryDomainDices: queryHandler({
         key: ["DomainDices"],
         query: () => services.DomainDice.getAllItems()
      }),
      queryDomainDicesById: queryHandler({
         key: ["getDomainDiceById"],
         query: () => services.DomainDice.getItemById(1)
      }),
      queryDomainDiceRollTypes: queryHandler({
         key: ["DomainDiceRollTypes"],
         query: () => services.DomainDiceRollType.getAllItems()
      }),
      queryDomainDiceRollTypesById: queryHandler({
         key: ["getDomainDiceRollTypeById"],
         query: () => services.DomainDiceRollType.getItemById(1)
      }),
      queryDomainItems: queryHandler({
         key: ["DomainItems"],
         query: () => services.DomainItem.getAllItems()
      }),
      queryDomainItemsById: queryHandler({
         key: ["getDomainItemById"],
         query: () => services.DomainItem.getItemById(1)
      }),
      queryDomainSizes: queryHandler({
         key: ["DomainSizes"],
         query: () => services.DomainSize.getAllItems()
      }),
      queryDomainSizesById: queryHandler({
         key: ["getDomainSizeById"],
         query: () => services.DomainSize.getItemById(1)
      }),
      queryDomainSpeciess: queryHandler({
         key: ["DomainSpeciess"],
         query: () => services.DomainSpecies.getAllItems()
      }),
      queryDomainSpeciessById: queryHandler({
         key: ["getDomainSpeciesById"],
         query: () => services.DomainSpecies.getItemById(1)
      }),
      queryDomainSpells: queryHandler({
         key: ["DomainSpells"],
         query: () => services.DomainSpell.getAllItems()
      }),
      queryDomainSpellsById: queryHandler({
         key: ["getDomainSpellById"],
         query: () => services.DomainSpell.getItemById(1)
      }),
      queryDomainSpellSchools: queryHandler({
         key: ["DomainSpellSchools"],
         query: () => services.DomainSpellSchool.getAllItems()
      }),
      queryDomainSpellSchoolsById: queryHandler({
         key: ["getDomainSpellSchoolById"],
         query: () => services.DomainSpellSchool.getItemById(1)
      }),
      queryDomainStaticEffects: queryHandler({
         key: ["DomainStaticEffects"],
         query: () => services.DomainStaticEffect.getAllItems()
      }),
      queryDomainStaticEffectsById: queryHandler({
         key: ["getDomainStaticEffectById"],
         query: () => services.DomainStaticEffect.getItemById(1)
      }),
      queryDomainSubClasss: queryHandler({
         key: ["DomainSubClasss"],
         query: () => services.DomainSubClass.getAllItems()
      }),
      queryDomainSubClasssById: queryHandler({
         key: ["getDomainSubClassById"],
         query: () => services.DomainSubClass.getItemById(1)
      }),
      queryQuantifiers: queryHandler({
         key: ["Quantifiers"],
         query: () => services.Quantifier.getAllItems()
      }),
      queryQuantifiersById: queryHandler({
         key: ["getQuantifierById"],
         query: () => services.Quantifier.getItemById(1)
      }),
   }
}
