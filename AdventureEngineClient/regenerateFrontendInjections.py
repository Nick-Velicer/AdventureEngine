import os
import re
import pprint

tsTypesDirectory = "types/coreTypes"
tsTypeImportsFile = "types/appTypes/appTypes"
servicesImportsFile = "services/generated"
injectionTargetDirectory = "injections/generated/"
typeNames = [os.fsdecode(file).replace('.ts', '') for file in os.listdir(tsTypesDirectory + "/")]

autogeneratedWarningMessage = [
    '//*** CAUTION ***',
    '//This is an autogenerated file produced by regenerateFrontendInjections.py.',
    '//Edits made here will not persist after regeneration.',
]

def indentLineBlock(lines: list):
    return ['   ' + line for line in lines]


def main():
    injectionTarget = os.path.dirname(injectionTargetDirectory)
    if not os.path.exists(injectionTarget):
        os.makedirs(injectionTarget)
            
    f = open(injectionTargetDirectory + "generatedInjectableServices.ts", 'w')
    f.writelines([i + '\n' for i in produceInjectedServicesFileLines()])
    f.close()
    
    print("Frontend injections successfully generated.")


def produceInjectedServicesFileLines():

    def produceTypeInterfaceLines(typeName: str):
        lines = [
            typeName + ': {',
            *indentLineBlock([
                'getAllItems: ' + typeName + 'Service.get' + typeName + 's,',
                'getItemById: ' + typeName + 'Service.get' + typeName + 'byId,',
                'saveItem: ' + typeName + 'Service.save' + typeName,
            ]),
            '},'
        ]

        return lines

    lines = [
        *autogeneratedWarningMessage,
        '',
        *['import * as ' + typeName + 'Service from "../../' + servicesImportsFile + '/' + typeName + 'Service";' for typeName in typeNames],
        '',
        'export const generatedInjectableServices = {',
        *indentLineBlock([*[item for sublist in [produceTypeInterfaceLines(typeName) for typeName in typeNames] for item in sublist]]),
        '} as const'
    ]

    return lines


if __name__ == '__main__': main()