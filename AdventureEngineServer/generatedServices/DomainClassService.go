//*** CAUTION ***
//This is an autogenerated file produced by regenerateBackend.py.
//Edits made here will not persist after backend regeneration.

package generatedServices
import (
   "errors"
   "reflect"
   types "AdventureEngineServer/generatedDatabaseTypes"
   "gorm.io/gorm"
)

func GetDomainClasss(db *gorm.DB, domainClasss *[]types.DomainClass) error {
   result := db.Table("DomainClass").Find(domainClasss)
   return result.Error
}

func GetDomainClassById(db *gorm.DB, id int, domainClass *types.DomainClass) error {
   result := db.Table("DomainClass").First(domainClass, id)
   return result.Error
}

func SaveDomainClass(db *gorm.DB, domainClasss []*types.DomainClass) error {
   tx := db.Begin()
   
   if tx.Error != nil {
      return errors.New("Could not initialize transaction to save " + reflect.TypeOf(domainClasss).Name() + " entity")
   }
   
   defer func() {
      if r := recover(); r != nil {
         tx.Rollback()
      }
   }()
   
   if err := tx.Error; err != nil {
      return err
   }
   
   if err := tx.Table("DomainClass").Create(domainClasss).Error; err != nil {
      tx.Rollback()
      return err
   }
   
   return tx.Commit().Error
}

func GetClassPrimaryAbilitysByDomainClassId(db *gorm.DB, id int, ClassPrimaryAbilitys *[]types.ClassPrimaryAbility) error {
   result := db.Table("ClassPrimaryAbility").Where(map[string]interface{}{"Class__DomainClass": id}).Find(ClassPrimaryAbilitys)
   return result.Error
}
func GetClassSavesByDomainClassId(db *gorm.DB, id int, ClassSaves *[]types.ClassSave) error {
   result := db.Table("ClassSave").Where(map[string]interface{}{"Class__DomainClass": id}).Find(ClassSaves)
   return result.Error
}
func GetDomainSubClasssByDomainClassId(db *gorm.DB, id int, DomainSubClasss *[]types.DomainSubClass) error {
   result := db.Table("DomainSubClass").Where(map[string]interface{}{"Class__DomainClass": id}).Find(DomainSubClasss)
   return result.Error
}
