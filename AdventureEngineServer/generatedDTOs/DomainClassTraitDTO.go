//*** CAUTION ***
//This is an autogenerated file produced by regenerateBackend.py.
//Edits made here will not persist after backend regeneration.

package generatedDTOs

import (
   types "AdventureEngineServer/generatedDatabaseTypes"
   utils "AdventureEngineServer/utils"
   services "AdventureEngineServer/generatedServices"
   "gorm.io/gorm"
   "reflect"
   "slices"
)

type DomainClassTraitDTOAttributes struct {
   AbbreviatedTitle *string
   Description *string
   
   IsActive *bool
   Title *string
}

type DomainClassTraitDTOManyToOneRelationships struct {
   Class__DomainClass *DomainClassDTO
   SubClass__DomainSubClass *DomainSubClassDTO
}

type DomainClassTraitDTOOneToManyRelationships struct {
   Quantifiers__Quantifier []*QuantifierDTO
}

type DomainClassTraitDTORelationships struct {
   ManyToOne DomainClassTraitDTOManyToOneRelationships
   OneToMany DomainClassTraitDTOOneToManyRelationships
}

type DomainClassTraitDTO struct {
   Id *int
   
   Attributes DomainClassTraitDTOAttributes
   
   Relationships DomainClassTraitDTORelationships
}

func DomainClassTraitToDomainClassTraitDTO(db *gorm.DB, domainClassTrait *types.DomainClassTrait, traversedTables []string) *DomainClassTraitDTO {
   
   if (domainClassTrait == nil) {
      print("Nil pointer passed to DTO conversion for table DomainClassTrait\n")
      return nil
   }
   
   if (slices.Contains(traversedTables, reflect.TypeOf(*domainClassTrait).Name())) {
      print("Hit circular catch case for table DomainClassTrait\n")
      return nil
   }
   
   traversedTables = append(traversedTables, reflect.TypeOf(*domainClassTrait).Name())
   
   var includedClass__DomainClass *types.DomainClass
   var includedSubClass__DomainSubClass *types.DomainSubClass
   var includedQuantifiers__Quantifiers []types.Quantifier
   
   if (domainClassTrait.Class__DomainClass != nil) {
      services.GetDomainClassById(db, int(*domainClassTrait.Class__DomainClass), includedClass__DomainClass)
   }

   if (domainClassTrait.SubClass__DomainSubClass != nil) {
      services.GetDomainSubClassById(db, int(*domainClassTrait.SubClass__DomainSubClass), includedSubClass__DomainSubClass)
   }

   if (slices.Contains(traversedTables, reflect.TypeOf(includedQuantifiers__Quantifiers).Elem().Name())) {
      services.GetQuantifiersByDomainClassTraitId(db, int(*domainClassTrait.Id), &includedQuantifiers__Quantifiers)
   } else {
      includedQuantifiers__Quantifiers = []types.Quantifier{}
      print("Hit circular catch case for table Quantifier\n")
   }

   
   return &DomainClassTraitDTO{
      Id: domainClassTrait.Id,
      Attributes: DomainClassTraitDTOAttributes{
         AbbreviatedTitle: domainClassTrait.AbbreviatedTitle,
         Description: domainClassTrait.Description,
         
         IsActive: domainClassTrait.IsActive,
         Title: domainClassTrait.Title,
      },
      Relationships: DomainClassTraitDTORelationships{
         ManyToOne: DomainClassTraitDTOManyToOneRelationships {
            Class__DomainClass: DomainClassToDomainClassDTO(db, includedClass__DomainClass, traversedTables),
            SubClass__DomainSubClass: DomainSubClassToDomainSubClassDTO(db, includedSubClass__DomainSubClass, traversedTables),
         },
         OneToMany: DomainClassTraitDTOOneToManyRelationships {
            Quantifiers__Quantifier: utils.Map(includedQuantifiers__Quantifiers, func(relationshipElement types.Quantifier) *QuantifierDTO { return QuantifierToQuantifierDTO(db, &relationshipElement, traversedTables) }),
         },
      },
   }
}

func DomainClassTraitDTOToDomainClassTrait(domainClassTrait *DomainClassTraitDTO) *types.DomainClassTrait {
   var tableTypeBuffer types.DomainClassTrait
   
   tableTypeBuffer.Id = domainClassTrait.Id
   tableTypeBuffer.AbbreviatedTitle = domainClassTrait.Attributes.AbbreviatedTitle
   tableTypeBuffer.Description = domainClassTrait.Attributes.Description
   
   tableTypeBuffer.IsActive = domainClassTrait.Attributes.IsActive
   tableTypeBuffer.Title = domainClassTrait.Attributes.Title
   
   if (domainClassTrait.Relationships.ManyToOne.Class__DomainClass != nil) {
      tableTypeBuffer.Class__DomainClass = domainClassTrait.Relationships.ManyToOne.Class__DomainClass.Id
   }

   if (domainClassTrait.Relationships.ManyToOne.SubClass__DomainSubClass != nil) {
      tableTypeBuffer.SubClass__DomainSubClass = domainClassTrait.Relationships.ManyToOne.SubClass__DomainSubClass.Id
   }

   return &tableTypeBuffer
}
