//*** CAUTION ***
//This is an autogenerated file produced by regenerateBackend.py.
//Edits made here will not persist after backend regeneration.

package generatedDTOs

import (
   types "AdventureEngineServer/generatedDatabaseTypes"
   
   services "AdventureEngineServer/generatedServices"
   "gorm.io/gorm"
   "reflect"
   "slices"
)

type DomainSpeciesDTOAttributes struct {
   AbbreviatedTitle *string
   Description *string
   
   IsActive *bool
   Title *string
}

type DomainSpeciesDTOManyToOneRelationships struct {
   CreatureType__DomainCreatureType *DomainCreatureTypeDTO
}

type DomainSpeciesDTOOneToManyRelationships struct {
}

type DomainSpeciesDTORelationships struct {
   ManyToOne DomainSpeciesDTOManyToOneRelationships
   OneToMany DomainSpeciesDTOOneToManyRelationships
}

type DomainSpeciesDTO struct {
   Id *int
   
   Attributes DomainSpeciesDTOAttributes
   
   Relationships DomainSpeciesDTORelationships
}

func DomainSpeciesToDomainSpeciesDTO(db *gorm.DB, domainSpecies *types.DomainSpecies, traversedTables []string) *DomainSpeciesDTO {
   
   if (domainSpecies == nil) {
      print("Nil pointer passed to DTO conversion for table DomainSpecies\n")
      return nil
   }
   
   if (slices.Contains(traversedTables, reflect.TypeOf(*domainSpecies).Name())) {
      print("Hit circular catch case for table DomainSpecies\n")
      return nil
   }
   
   traversedTables = append(traversedTables, reflect.TypeOf(*domainSpecies).Name())
   
   var includedCreatureType__DomainCreatureType *types.DomainCreatureType
   
   if (domainSpecies.CreatureType__DomainCreatureType != nil) {
      services.GetDomainCreatureTypeById(db, int(*domainSpecies.CreatureType__DomainCreatureType), includedCreatureType__DomainCreatureType)
   }

   
   return &DomainSpeciesDTO{
      Id: domainSpecies.Id,
      Attributes: DomainSpeciesDTOAttributes{
         AbbreviatedTitle: domainSpecies.AbbreviatedTitle,
         Description: domainSpecies.Description,
         
         IsActive: domainSpecies.IsActive,
         Title: domainSpecies.Title,
      },
      Relationships: DomainSpeciesDTORelationships{
         ManyToOne: DomainSpeciesDTOManyToOneRelationships {
            CreatureType__DomainCreatureType: DomainCreatureTypeToDomainCreatureTypeDTO(db, includedCreatureType__DomainCreatureType, traversedTables),
         },
         OneToMany: DomainSpeciesDTOOneToManyRelationships {
         },
      },
   }
}

func DomainSpeciesDTOToDomainSpecies(domainSpecies *DomainSpeciesDTO) *types.DomainSpecies {
   var tableTypeBuffer types.DomainSpecies
   
   tableTypeBuffer.Id = domainSpecies.Id
   tableTypeBuffer.AbbreviatedTitle = domainSpecies.Attributes.AbbreviatedTitle
   tableTypeBuffer.Description = domainSpecies.Attributes.Description
   
   tableTypeBuffer.IsActive = domainSpecies.Attributes.IsActive
   tableTypeBuffer.Title = domainSpecies.Attributes.Title
   
   if (domainSpecies.Relationships.ManyToOne.CreatureType__DomainCreatureType != nil) {
      tableTypeBuffer.CreatureType__DomainCreatureType = domainSpecies.Relationships.ManyToOne.CreatureType__DomainCreatureType.Id
   }

   return &tableTypeBuffer
}
