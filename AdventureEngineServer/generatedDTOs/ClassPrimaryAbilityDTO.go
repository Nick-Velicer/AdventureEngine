//*** CAUTION ***
//This is an autogenerated file produced by regenerateBackend.py.
//Edits made here will not persist after backend regeneration.

package generatedDTOs

import (
   types "AdventureEngineServer/generatedDatabaseTypes"
   
   services "AdventureEngineServer/generatedServices"
   "gorm.io/gorm"
   "reflect"
   "slices"
)

type ClassPrimaryAbilityDTOAttributes struct {
   Description *string
   
   IsActive *bool
   Title *string
}

type ClassPrimaryAbilityDTOManyToOneRelationships struct {
   Class__DomainClass *DomainClassDTO
   Stat__DomainCharacterStat *DomainCharacterStatDTO
}

type ClassPrimaryAbilityDTOOneToManyRelationships struct {
}

type ClassPrimaryAbilityDTORelationships struct {
   ManyToOne ClassPrimaryAbilityDTOManyToOneRelationships
   OneToMany ClassPrimaryAbilityDTOOneToManyRelationships
}

type ClassPrimaryAbilityDTO struct {
   Id *float64
   
   Attributes ClassPrimaryAbilityDTOAttributes
   
   Relationships ClassPrimaryAbilityDTORelationships
}

func ClassPrimaryAbilityToClassPrimaryAbilityDTO(db *gorm.DB, classPrimaryAbility *types.ClassPrimaryAbility, traversedTables []string) *ClassPrimaryAbilityDTO {
   
   if (classPrimaryAbility == nil) {
      print("No valid pointer passed to DTO conversion for table ClassPrimaryAbility")
      return nil
   }
   
   if (slices.Contains(traversedTables, reflect.TypeOf(*classPrimaryAbility).Name())) {
      print("Hit circular catch case for table ClassPrimaryAbility\n")
      return nil
   }
   
   traversedTables = append(traversedTables, reflect.TypeOf(*classPrimaryAbility).Name())
   
   var includedClass__DomainClass types.DomainClass
   var includedStat__DomainCharacterStat types.DomainCharacterStat
   
   if (classPrimaryAbility.Class__DomainClass != nil) {
      services.GetDomainClassById(db, int(*classPrimaryAbility.Class__DomainClass), &includedClass__DomainClass)
   }

   if (classPrimaryAbility.Stat__DomainCharacterStat != nil) {
      services.GetDomainCharacterStatById(db, int(*classPrimaryAbility.Stat__DomainCharacterStat), &includedStat__DomainCharacterStat)
   }

   
   return &ClassPrimaryAbilityDTO{
      Id: classPrimaryAbility.Id,
      Attributes: ClassPrimaryAbilityDTOAttributes{
         Description: classPrimaryAbility.Description,
         
         IsActive: classPrimaryAbility.IsActive,
         Title: classPrimaryAbility.Title,
      },
      Relationships: ClassPrimaryAbilityDTORelationships{
         ManyToOne: ClassPrimaryAbilityDTOManyToOneRelationships {
            Class__DomainClass: DomainClassToDomainClassDTO(db, &includedClass__DomainClass, traversedTables),
            Stat__DomainCharacterStat: DomainCharacterStatToDomainCharacterStatDTO(db, &includedStat__DomainCharacterStat, traversedTables),
         },
         OneToMany: ClassPrimaryAbilityDTOOneToManyRelationships {
         },
      },
   }
}

func ClassPrimaryAbilityDTOToClassPrimaryAbility(classPrimaryAbility *ClassPrimaryAbilityDTO) types.ClassPrimaryAbility {
   return types.ClassPrimaryAbility{
      Id: classPrimaryAbility.Id,
      Description: classPrimaryAbility.Attributes.Description,
      
      IsActive: classPrimaryAbility.Attributes.IsActive,
      Title: classPrimaryAbility.Attributes.Title,
      Class__DomainClass: classPrimaryAbility.Relationships.ManyToOne.Class__DomainClass.Id,
      Stat__DomainCharacterStat: classPrimaryAbility.Relationships.ManyToOne.Stat__DomainCharacterStat.Id,
   }
}
