//*** CAUTION ***
//This is an autogenerated file produced by regenerateBackend.py.
//Edits made here will not persist after backend regeneration.

package generatedDTOs

import (
   types "AdventureEngineServer/generatedDatabaseTypes"
   
   services "AdventureEngineServer/generatedServices"
   "gorm.io/gorm"
   "reflect"
   "slices"
)

type QuantifierConditionalMapDTOAttributes struct {
   AbbreviatedTitle *string
   Description *string
   
   IsActive *bool
   Title *string
}

type QuantifierConditionalMapDTOManyToOneRelationships struct {
   Base__Quantifier *QuantifierDTO
   IsTrue__DomainCondition *DomainConditionDTO
   Modifier__Quantifier *QuantifierDTO
}

type QuantifierConditionalMapDTOOneToManyRelationships struct {
}

type QuantifierConditionalMapDTORelationships struct {
   ManyToOne QuantifierConditionalMapDTOManyToOneRelationships
   OneToMany QuantifierConditionalMapDTOOneToManyRelationships
}

type QuantifierConditionalMapDTO struct {
   Id *int
   
   Attributes QuantifierConditionalMapDTOAttributes
   
   Relationships QuantifierConditionalMapDTORelationships
}

func QuantifierConditionalMapToQuantifierConditionalMapDTO(db *gorm.DB, quantifierConditionalMap *types.QuantifierConditionalMap, traversedTables []string) *QuantifierConditionalMapDTO {
   
   if (quantifierConditionalMap == nil) {
      print("Nil pointer passed to DTO conversion for table QuantifierConditionalMap\n")
      return nil
   }
   
   if (slices.Contains(traversedTables, reflect.TypeOf(*quantifierConditionalMap).Name())) {
      print("Hit circular catch case for table QuantifierConditionalMap\n")
      return nil
   }
   
   traversedTables = append(traversedTables, reflect.TypeOf(*quantifierConditionalMap).Name())
   
   var includedBase__Quantifier *types.Quantifier
   var includedIsTrue__DomainCondition *types.DomainCondition
   var includedModifier__Quantifier *types.Quantifier
   
   if (quantifierConditionalMap.Base__Quantifier != nil) {
      services.GetQuantifierById(db, int(*quantifierConditionalMap.Base__Quantifier), includedBase__Quantifier)
   }

   if (quantifierConditionalMap.IsTrue__DomainCondition != nil) {
      services.GetDomainConditionById(db, int(*quantifierConditionalMap.IsTrue__DomainCondition), includedIsTrue__DomainCondition)
   }

   if (quantifierConditionalMap.Modifier__Quantifier != nil) {
      services.GetQuantifierById(db, int(*quantifierConditionalMap.Modifier__Quantifier), includedModifier__Quantifier)
   }

   
   return &QuantifierConditionalMapDTO{
      Id: quantifierConditionalMap.Id,
      Attributes: QuantifierConditionalMapDTOAttributes{
         AbbreviatedTitle: quantifierConditionalMap.AbbreviatedTitle,
         Description: quantifierConditionalMap.Description,
         
         IsActive: quantifierConditionalMap.IsActive,
         Title: quantifierConditionalMap.Title,
      },
      Relationships: QuantifierConditionalMapDTORelationships{
         ManyToOne: QuantifierConditionalMapDTOManyToOneRelationships {
            Base__Quantifier: QuantifierToQuantifierDTO(db, includedBase__Quantifier, traversedTables),
            IsTrue__DomainCondition: DomainConditionToDomainConditionDTO(db, includedIsTrue__DomainCondition, traversedTables),
            Modifier__Quantifier: QuantifierToQuantifierDTO(db, includedModifier__Quantifier, traversedTables),
         },
         OneToMany: QuantifierConditionalMapDTOOneToManyRelationships {
         },
      },
   }
}

func QuantifierConditionalMapDTOToQuantifierConditionalMap(quantifierConditionalMap *QuantifierConditionalMapDTO) *types.QuantifierConditionalMap {
   var tableTypeBuffer types.QuantifierConditionalMap
   
   tableTypeBuffer.Id = quantifierConditionalMap.Id
   tableTypeBuffer.AbbreviatedTitle = quantifierConditionalMap.Attributes.AbbreviatedTitle
   tableTypeBuffer.Description = quantifierConditionalMap.Attributes.Description
   
   tableTypeBuffer.IsActive = quantifierConditionalMap.Attributes.IsActive
   tableTypeBuffer.Title = quantifierConditionalMap.Attributes.Title
   
   if (quantifierConditionalMap.Relationships.ManyToOne.Base__Quantifier != nil) {
      tableTypeBuffer.Base__Quantifier = quantifierConditionalMap.Relationships.ManyToOne.Base__Quantifier.Id
   }

   if (quantifierConditionalMap.Relationships.ManyToOne.IsTrue__DomainCondition != nil) {
      tableTypeBuffer.IsTrue__DomainCondition = quantifierConditionalMap.Relationships.ManyToOne.IsTrue__DomainCondition.Id
   }

   if (quantifierConditionalMap.Relationships.ManyToOne.Modifier__Quantifier != nil) {
      tableTypeBuffer.Modifier__Quantifier = quantifierConditionalMap.Relationships.ManyToOne.Modifier__Quantifier.Id
   }

   return &tableTypeBuffer
}
