//*** CAUTION ***
//This is an autogenerated file produced by regenerateBackend.py.
//Edits made here will not persist after backend regeneration.

package generatedDTOs

import (
   types "AdventureEngineServer/generatedDatabaseTypes"
   
   services "AdventureEngineServer/generatedServices"
   "gorm.io/gorm"
   "reflect"
   "slices"
)

type DomainSpellDTOAttributes struct {
   ConcentrationRequired *bool
   Description *string
   HasSomaticRequirement *bool
   HasVerbalRequirement *bool
   HourCastTime *float64
   HourDuration *float64
   
   IsAction *bool
   IsActive *bool
   IsBonusAction *bool
   IsCantrip *bool
   IsMelee *bool
   IsRanged *bool
   IsRitual *bool
   Level *float64
   MaterialComponent *string
   MinuteCastTime *float64
   RoundDuration *float64
   Title *string
}

type DomainSpellDTOManyToOneRelationships struct {
   DamageScaling__DomainDice *DomainDiceDTO
   School__DomainSpellSchool *DomainSpellSchoolDTO
}

type DomainSpellDTOOneToManyRelationships struct {
}

type DomainSpellDTORelationships struct {
   ManyToOne DomainSpellDTOManyToOneRelationships
   OneToMany DomainSpellDTOOneToManyRelationships
}

type DomainSpellDTO struct {
   Id *float64
   
   Attributes DomainSpellDTOAttributes
   
   Relationships DomainSpellDTORelationships
}

func DomainSpellToDomainSpellDTO(db *gorm.DB, domainSpell *types.DomainSpell, traversedTables []string) *DomainSpellDTO {
   
   if (slices.Contains(traversedTables, reflect.TypeOf(*domainSpell).Name())) {
      print("Hit circular catch case for table DomainSpell\n")
      return nil
   }
   
   traversedTables = append(traversedTables, reflect.TypeOf(*domainSpell).Name())
   
   var includedDamageScaling__DomainDice types.DomainDice
   var includedSchool__DomainSpellSchool types.DomainSpellSchool
   
   services.GetDomainDiceById(db, int(*domainSpell.DamageScaling__DomainDice), &includedDamageScaling__DomainDice)
   services.GetDomainSpellSchoolById(db, int(*domainSpell.School__DomainSpellSchool), &includedSchool__DomainSpellSchool)
   
   return &DomainSpellDTO{
      Id: domainSpell.Id,
      Attributes: DomainSpellDTOAttributes{
         ConcentrationRequired: domainSpell.ConcentrationRequired,
         Description: domainSpell.Description,
         HasSomaticRequirement: domainSpell.HasSomaticRequirement,
         HasVerbalRequirement: domainSpell.HasVerbalRequirement,
         HourCastTime: domainSpell.HourCastTime,
         HourDuration: domainSpell.HourDuration,
         
         IsAction: domainSpell.IsAction,
         IsActive: domainSpell.IsActive,
         IsBonusAction: domainSpell.IsBonusAction,
         IsCantrip: domainSpell.IsCantrip,
         IsMelee: domainSpell.IsMelee,
         IsRanged: domainSpell.IsRanged,
         IsRitual: domainSpell.IsRitual,
         Level: domainSpell.Level,
         MaterialComponent: domainSpell.MaterialComponent,
         MinuteCastTime: domainSpell.MinuteCastTime,
         RoundDuration: domainSpell.RoundDuration,
         Title: domainSpell.Title,
      },
      Relationships: DomainSpellDTORelationships{
         ManyToOne: DomainSpellDTOManyToOneRelationships {
            DamageScaling__DomainDice: DomainDiceToDomainDiceDTO(db, &includedDamageScaling__DomainDice, traversedTables),
            School__DomainSpellSchool: DomainSpellSchoolToDomainSpellSchoolDTO(db, &includedSchool__DomainSpellSchool, traversedTables),
         },
         OneToMany: DomainSpellDTOOneToManyRelationships {
         },
      },
   }
}

func DomainSpellDTOToDomainSpell(domainSpell *DomainSpellDTO) types.DomainSpell {
   return types.DomainSpell{
      Id: domainSpell.Id,
      ConcentrationRequired: domainSpell.Attributes.ConcentrationRequired,
      Description: domainSpell.Attributes.Description,
      HasSomaticRequirement: domainSpell.Attributes.HasSomaticRequirement,
      HasVerbalRequirement: domainSpell.Attributes.HasVerbalRequirement,
      HourCastTime: domainSpell.Attributes.HourCastTime,
      HourDuration: domainSpell.Attributes.HourDuration,
      
      IsAction: domainSpell.Attributes.IsAction,
      IsActive: domainSpell.Attributes.IsActive,
      IsBonusAction: domainSpell.Attributes.IsBonusAction,
      IsCantrip: domainSpell.Attributes.IsCantrip,
      IsMelee: domainSpell.Attributes.IsMelee,
      IsRanged: domainSpell.Attributes.IsRanged,
      IsRitual: domainSpell.Attributes.IsRitual,
      Level: domainSpell.Attributes.Level,
      MaterialComponent: domainSpell.Attributes.MaterialComponent,
      MinuteCastTime: domainSpell.Attributes.MinuteCastTime,
      RoundDuration: domainSpell.Attributes.RoundDuration,
      Title: domainSpell.Attributes.Title,
      DamageScaling__DomainDice: domainSpell.Relationships.ManyToOne.DamageScaling__DomainDice.Id,
      School__DomainSpellSchool: domainSpell.Relationships.ManyToOne.School__DomainSpellSchool.Id,
   }
}
