//*** CAUTION ***
//This is an autogenerated file produced by regenerateBackend.py.
//Edits made here will not persist after backend regeneration.

package generatedDTOs

import (
   types "AdventureEngineServer/generatedDatabaseTypes"
   utils "AdventureEngineServer/utils"
   services "AdventureEngineServer/generatedServices"
   "gorm.io/gorm"
   "reflect"
   "slices"
)

type DomainSpellDTOAttributes struct {
   ConcentrationRequired *bool
   DayDuration *float64
   Description *string
   HasSomaticRequirement *bool
   HasVerbalRequirement *bool
   HourCastTime *float64
   HourDuration *float64
   
   IsAction *bool
   IsActive *bool
   IsBonusAction *bool
   IsCantrip *bool
   IsInstantaneous *bool
   IsRitual *bool
   LastsUntilDispelled *bool
   LevelRequirement *float64
   MaterialComponent *string
   MinuteCastTime *float64
   MinuteDuration *float64
   RangeFeet *float64
   RangeMiles *float64
   RequiresTouch *bool
   RoundDuration *float64
   TargetsSelf *bool
   Title *string
}

type DomainSpellDTOManyToOneRelationships struct {
   DamageScaling__DomainDice *DomainDiceDTO
   School__DomainSpellSchool *DomainSpellSchoolDTO
}

type DomainSpellDTOOneToManyRelationships struct {
   Classes__ClassSpell []*ClassSpellDTO
}

type DomainSpellDTORelationships struct {
   ManyToOne DomainSpellDTOManyToOneRelationships
   OneToMany DomainSpellDTOOneToManyRelationships
}

type DomainSpellDTO struct {
   Id *int
   
   Attributes DomainSpellDTOAttributes
   
   Relationships DomainSpellDTORelationships
}

func DomainSpellToDomainSpellDTO(db *gorm.DB, domainSpell *types.DomainSpell, traversedTables []string) *DomainSpellDTO {
   
   if (domainSpell == nil) {
      print("Nil pointer passed to DTO conversion for table DomainSpell\n")
      return nil
   }
   
   if (slices.Contains(traversedTables, reflect.TypeOf(*domainSpell).Name())) {
      print("Hit circular catch case for table DomainSpell\n")
      return nil
   }
   
   traversedTables = append(traversedTables, reflect.TypeOf(*domainSpell).Name())
   
   var includedDamageScaling__DomainDice *types.DomainDice
   var includedSchool__DomainSpellSchool *types.DomainSpellSchool
   var includedClasses__ClassSpells []types.ClassSpell
   
   if (domainSpell.DamageScaling__DomainDice != nil) {
      services.GetDomainDiceById(db, int(*domainSpell.DamageScaling__DomainDice), includedDamageScaling__DomainDice)
   }

   if (domainSpell.School__DomainSpellSchool != nil) {
      services.GetDomainSpellSchoolById(db, int(*domainSpell.School__DomainSpellSchool), includedSchool__DomainSpellSchool)
   }

   if (slices.Contains(traversedTables, reflect.TypeOf(includedClasses__ClassSpells).Elem().Name())) {
      services.GetClassSpellsByDomainSpellId(db, int(*domainSpell.Id), &includedClasses__ClassSpells)
   } else {
      includedClasses__ClassSpells = []types.ClassSpell{}
      print("Hit circular catch case for table ClassSpell\n")
   }

   
   return &DomainSpellDTO{
      Id: domainSpell.Id,
      Attributes: DomainSpellDTOAttributes{
         ConcentrationRequired: domainSpell.ConcentrationRequired,
         DayDuration: domainSpell.DayDuration,
         Description: domainSpell.Description,
         HasSomaticRequirement: domainSpell.HasSomaticRequirement,
         HasVerbalRequirement: domainSpell.HasVerbalRequirement,
         HourCastTime: domainSpell.HourCastTime,
         HourDuration: domainSpell.HourDuration,
         
         IsAction: domainSpell.IsAction,
         IsActive: domainSpell.IsActive,
         IsBonusAction: domainSpell.IsBonusAction,
         IsCantrip: domainSpell.IsCantrip,
         IsInstantaneous: domainSpell.IsInstantaneous,
         IsRitual: domainSpell.IsRitual,
         LastsUntilDispelled: domainSpell.LastsUntilDispelled,
         LevelRequirement: domainSpell.LevelRequirement,
         MaterialComponent: domainSpell.MaterialComponent,
         MinuteCastTime: domainSpell.MinuteCastTime,
         MinuteDuration: domainSpell.MinuteDuration,
         RangeFeet: domainSpell.RangeFeet,
         RangeMiles: domainSpell.RangeMiles,
         RequiresTouch: domainSpell.RequiresTouch,
         RoundDuration: domainSpell.RoundDuration,
         TargetsSelf: domainSpell.TargetsSelf,
         Title: domainSpell.Title,
      },
      Relationships: DomainSpellDTORelationships{
         ManyToOne: DomainSpellDTOManyToOneRelationships {
            DamageScaling__DomainDice: DomainDiceToDomainDiceDTO(db, includedDamageScaling__DomainDice, traversedTables),
            School__DomainSpellSchool: DomainSpellSchoolToDomainSpellSchoolDTO(db, includedSchool__DomainSpellSchool, traversedTables),
         },
         OneToMany: DomainSpellDTOOneToManyRelationships {
            Classes__ClassSpell: utils.Map(includedClasses__ClassSpells, func(relationshipElement types.ClassSpell) *ClassSpellDTO { return ClassSpellToClassSpellDTO(db, &relationshipElement, traversedTables) }),
         },
      },
   }
}

func DomainSpellDTOToDomainSpell(domainSpell *DomainSpellDTO) types.DomainSpell {
   var tableTypeBuffer types.DomainSpell
   
   tableTypeBuffer.Id = domainSpell.Id
   tableTypeBuffer.ConcentrationRequired = domainSpell.Attributes.ConcentrationRequired
   tableTypeBuffer.DayDuration = domainSpell.Attributes.DayDuration
   tableTypeBuffer.Description = domainSpell.Attributes.Description
   tableTypeBuffer.HasSomaticRequirement = domainSpell.Attributes.HasSomaticRequirement
   tableTypeBuffer.HasVerbalRequirement = domainSpell.Attributes.HasVerbalRequirement
   tableTypeBuffer.HourCastTime = domainSpell.Attributes.HourCastTime
   tableTypeBuffer.HourDuration = domainSpell.Attributes.HourDuration
   
   tableTypeBuffer.IsAction = domainSpell.Attributes.IsAction
   tableTypeBuffer.IsActive = domainSpell.Attributes.IsActive
   tableTypeBuffer.IsBonusAction = domainSpell.Attributes.IsBonusAction
   tableTypeBuffer.IsCantrip = domainSpell.Attributes.IsCantrip
   tableTypeBuffer.IsInstantaneous = domainSpell.Attributes.IsInstantaneous
   tableTypeBuffer.IsRitual = domainSpell.Attributes.IsRitual
   tableTypeBuffer.LastsUntilDispelled = domainSpell.Attributes.LastsUntilDispelled
   tableTypeBuffer.LevelRequirement = domainSpell.Attributes.LevelRequirement
   tableTypeBuffer.MaterialComponent = domainSpell.Attributes.MaterialComponent
   tableTypeBuffer.MinuteCastTime = domainSpell.Attributes.MinuteCastTime
   tableTypeBuffer.MinuteDuration = domainSpell.Attributes.MinuteDuration
   tableTypeBuffer.RangeFeet = domainSpell.Attributes.RangeFeet
   tableTypeBuffer.RangeMiles = domainSpell.Attributes.RangeMiles
   tableTypeBuffer.RequiresTouch = domainSpell.Attributes.RequiresTouch
   tableTypeBuffer.RoundDuration = domainSpell.Attributes.RoundDuration
   tableTypeBuffer.TargetsSelf = domainSpell.Attributes.TargetsSelf
   tableTypeBuffer.Title = domainSpell.Attributes.Title
   
   if (domainSpell.Relationships.ManyToOne.DamageScaling__DomainDice != nil) {
      tableTypeBuffer.DamageScaling__DomainDice = domainSpell.Relationships.ManyToOne.DamageScaling__DomainDice.Id
   }

   if (domainSpell.Relationships.ManyToOne.School__DomainSpellSchool != nil) {
      tableTypeBuffer.School__DomainSpellSchool = domainSpell.Relationships.ManyToOne.School__DomainSpellSchool.Id
   }

   return tableTypeBuffer
}
