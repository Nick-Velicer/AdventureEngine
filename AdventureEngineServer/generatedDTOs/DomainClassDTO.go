//*** CAUTION ***
//This is an autogenerated file produced by regenerateBackend.py.
//Edits made here will not persist after backend regeneration.

package generatedDTOs

import (
   types "AdventureEngineServer/generatedDatabaseTypes"
   utils "AdventureEngineServer/utils"
   services "AdventureEngineServer/generatedServices"
   "gorm.io/gorm"
   "reflect"
   "slices"
)

type DomainClassDTOAttributes struct {
   Description *string
   
   IsActive *bool
   Title *string
}

type DomainClassDTOManyToOneRelationships struct {
   HitDie__DomainDice *DomainDiceDTO
   SpellcastingStat__DomainCharacterStat *DomainCharacterStatDTO
}

type DomainClassDTOOneToManyRelationships struct {
   PrimaryStats__ClassPrimaryAbility []*ClassPrimaryAbilityDTO
   Saves__ClassSave []*ClassSaveDTO
}

type DomainClassDTORelationships struct {
   ManyToOne DomainClassDTOManyToOneRelationships
   OneToMany DomainClassDTOOneToManyRelationships
}

type DomainClassDTO struct {
   Id *float64
   
   Attributes DomainClassDTOAttributes
   
   Relationships DomainClassDTORelationships
}

func DomainClassToDomainClassDTO(db *gorm.DB, domainClass *types.DomainClass, traversedTables []string) *DomainClassDTO {
   
   if (domainClass == nil) {
      print("Nil pointer passed to DTO conversion for table DomainClass")
      return nil
   }
   
   if (slices.Contains(traversedTables, reflect.TypeOf(*domainClass).Name())) {
      print("Hit circular catch case for table DomainClass\n")
      return nil
   }
   
   traversedTables = append(traversedTables, reflect.TypeOf(*domainClass).Name())
   
   var includedHitDie__DomainDice types.DomainDice
   var includedSpellcastingStat__DomainCharacterStat types.DomainCharacterStat
   var includedPrimaryStats__ClassPrimaryAbilitys []types.ClassPrimaryAbility
   var includedSaves__ClassSaves []types.ClassSave
   
   if (domainClass.HitDie__DomainDice != nil) {
      services.GetDomainDiceById(db, int(*domainClass.HitDie__DomainDice), &includedHitDie__DomainDice)
   }

   if (domainClass.SpellcastingStat__DomainCharacterStat != nil) {
      services.GetDomainCharacterStatById(db, int(*domainClass.SpellcastingStat__DomainCharacterStat), &includedSpellcastingStat__DomainCharacterStat)
   }

   if (slices.Contains(traversedTables, reflect.TypeOf(includedPrimaryStats__ClassPrimaryAbilitys).Elem().Name())) {
      services.GetClassPrimaryAbilitysByDomainClassId(db, int(*domainClass.Id), &includedPrimaryStats__ClassPrimaryAbilitys)
   } else {
      includedPrimaryStats__ClassPrimaryAbilitys = []types.ClassPrimaryAbility{}
      print("Hit circular catch case for table ClassPrimaryAbility\n")
   }

   if (slices.Contains(traversedTables, reflect.TypeOf(includedSaves__ClassSaves).Elem().Name())) {
      services.GetClassSavesByDomainClassId(db, int(*domainClass.Id), &includedSaves__ClassSaves)
   } else {
      includedSaves__ClassSaves = []types.ClassSave{}
      print("Hit circular catch case for table ClassSave\n")
   }

   
   return &DomainClassDTO{
      Id: domainClass.Id,
      Attributes: DomainClassDTOAttributes{
         Description: domainClass.Description,
         
         IsActive: domainClass.IsActive,
         Title: domainClass.Title,
      },
      Relationships: DomainClassDTORelationships{
         ManyToOne: DomainClassDTOManyToOneRelationships {
            HitDie__DomainDice: DomainDiceToDomainDiceDTO(db, &includedHitDie__DomainDice, traversedTables),
            SpellcastingStat__DomainCharacterStat: DomainCharacterStatToDomainCharacterStatDTO(db, &includedSpellcastingStat__DomainCharacterStat, traversedTables),
         },
         OneToMany: DomainClassDTOOneToManyRelationships {
            PrimaryStats__ClassPrimaryAbility: utils.Map(includedPrimaryStats__ClassPrimaryAbilitys, func(relationshipElement types.ClassPrimaryAbility) *ClassPrimaryAbilityDTO { return ClassPrimaryAbilityToClassPrimaryAbilityDTO(db, &relationshipElement, traversedTables) }),
            Saves__ClassSave: utils.Map(includedSaves__ClassSaves, func(relationshipElement types.ClassSave) *ClassSaveDTO { return ClassSaveToClassSaveDTO(db, &relationshipElement, traversedTables) }),
         },
      },
   }
}

func DomainClassDTOToDomainClass(domainClass *DomainClassDTO) types.DomainClass {
   var tableTypeBuffer types.DomainClass
   
   tableTypeBuffer.Id = domainClass.Id
   tableTypeBuffer.Description = domainClass.Attributes.Description
   
   tableTypeBuffer.IsActive = domainClass.Attributes.IsActive
   tableTypeBuffer.Title = domainClass.Attributes.Title
   
   if (domainClass.Relationships.ManyToOne.HitDie__DomainDice != nil) {
      tableTypeBuffer.HitDie__DomainDice = domainClass.Relationships.ManyToOne.HitDie__DomainDice.Id
   }

   if (domainClass.Relationships.ManyToOne.SpellcastingStat__DomainCharacterStat != nil) {
      tableTypeBuffer.SpellcastingStat__DomainCharacterStat = domainClass.Relationships.ManyToOne.SpellcastingStat__DomainCharacterStat.Id
   }

   return tableTypeBuffer
}
