//*** CAUTION ***
//This is an autogenerated file produced by regenerateBackend.py.
//Edits made here will not persist after backend regeneration.

package generatedDTOs

import (
   types "AdventureEngineServer/generatedDatabaseTypes"
   
   services "AdventureEngineServer/generatedServices"
   "gorm.io/gorm"
   "reflect"
   "slices"
)

type DomainClassDTOAttributes struct {
   Description *string
   
   IsActive *bool
   Title *string
}

type DomainClassDTOManyToOneRelationships struct {
   HitDie__DomainDice *DomainDiceDTO
   SpellcastingStat__DomainCharacterStat *DomainCharacterStatDTO
}

type DomainClassDTOOneToManyRelationships struct {
}

type DomainClassDTORelationships struct {
   ManyToOne DomainClassDTOManyToOneRelationships
   OneToMany DomainClassDTOOneToManyRelationships
}

type DomainClassDTO struct {
   Id *float64
   
   Attributes DomainClassDTOAttributes
   
   Relationships DomainClassDTORelationships
}

func DomainClassToDomainClassDTO(db *gorm.DB, domainClass *types.DomainClass, traversedTables []string) *DomainClassDTO {
   
   if (slices.Contains(traversedTables, reflect.TypeOf(*domainClass).Name())) {
      print("Hit circular catch case for table DomainClass\n")
      return nil
   }
   
   traversedTables = append(traversedTables, reflect.TypeOf(*domainClass).Name())
   
   var includedHitDieDomainDice types.DomainDice
   var includedSpellcastingStatDomainCharacterStat types.DomainCharacterStat
   
   services.GetDomainDiceById(db, int(*domainClass.HitDieDomainDice), &includedHitDieDomainDice)
   services.GetDomainCharacterStatById(db, int(*domainClass.SpellcastingStatDomainCharacterStat), &includedSpellcastingStatDomainCharacterStat)
   
   return &DomainClassDTO{
      Id: domainClass.Id,
      Attributes: DomainClassDTOAttributes{
         Description: domainClass.Description,
         
         IsActive: domainClass.IsActive,
         Title: domainClass.Title,
      },
      Relationships: DomainClassDTORelationships{
         ManyToOne: DomainClassDTOManyToOneRelationships {
            HitDie__DomainDice: DomainDiceToDomainDiceDTO(db, &includedHitDieDomainDice, traversedTables),
            SpellcastingStat__DomainCharacterStat: DomainCharacterStatToDomainCharacterStatDTO(db, &includedSpellcastingStatDomainCharacterStat, traversedTables),
         },
         OneToMany: DomainClassDTOOneToManyRelationships {
         },
      },
   }
}

func DomainClassDTOToDomainClass(domainClass *DomainClassDTO) types.DomainClass {
   return types.DomainClass{
      Id: domainClass.Id,
      Description: domainClass.Attributes.Description,
      
      IsActive: domainClass.Attributes.IsActive,
      Title: domainClass.Attributes.Title,
      HitDieDomainDice: domainClass.Relationships.ManyToOne.HitDie__DomainDice.Id,
      SpellcastingStatDomainCharacterStat: domainClass.Relationships.ManyToOne.SpellcastingStat__DomainCharacterStat.Id,
   }
}
