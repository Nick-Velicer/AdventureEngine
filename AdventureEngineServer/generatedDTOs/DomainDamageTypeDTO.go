//*** CAUTION ***
//This is an autogenerated file produced by regenerateBackend.py.
//Edits made here will not persist after backend regeneration.

package generatedDTOs

import (
   types "AdventureEngineServer/generatedDatabaseTypes"
   
   
   "gorm.io/gorm"
   "reflect"
   "slices"
)

type DomainDamageTypeDTOAttributes struct {
   Description *string
   
   IsActive *bool
   Title *string
}

type DomainDamageTypeDTOManyToOneRelationships struct {
}

type DomainDamageTypeDTOOneToManyRelationships struct {
}

type DomainDamageTypeDTORelationships struct {
   ManyToOne DomainDamageTypeDTOManyToOneRelationships
   OneToMany DomainDamageTypeDTOOneToManyRelationships
}

type DomainDamageTypeDTO struct {
   Id *int
   
   Attributes DomainDamageTypeDTOAttributes
   
   Relationships DomainDamageTypeDTORelationships
}

func DomainDamageTypeToDomainDamageTypeDTO(db *gorm.DB, domainDamageType *types.DomainDamageType, traversedTables []string) *DomainDamageTypeDTO {
   
   if (domainDamageType == nil) {
      print("Nil pointer passed to DTO conversion for table DomainDamageType\n")
      return nil
   }
   
   if (slices.Contains(traversedTables, reflect.TypeOf(*domainDamageType).Name())) {
      print("Hit circular catch case for table DomainDamageType\n")
      return nil
   }
   
   traversedTables = append(traversedTables, reflect.TypeOf(*domainDamageType).Name())
   
   
   
   return &DomainDamageTypeDTO{
      Id: domainDamageType.Id,
      Attributes: DomainDamageTypeDTOAttributes{
         Description: domainDamageType.Description,
         
         IsActive: domainDamageType.IsActive,
         Title: domainDamageType.Title,
      },
      Relationships: DomainDamageTypeDTORelationships{
         ManyToOne: DomainDamageTypeDTOManyToOneRelationships {
         },
         OneToMany: DomainDamageTypeDTOOneToManyRelationships {
         },
      },
   }
}

func DomainDamageTypeDTOToDomainDamageType(domainDamageType *DomainDamageTypeDTO) *types.DomainDamageType {
   var tableTypeBuffer types.DomainDamageType
   
   tableTypeBuffer.Id = domainDamageType.Id
   tableTypeBuffer.Description = domainDamageType.Attributes.Description
   
   tableTypeBuffer.IsActive = domainDamageType.Attributes.IsActive
   tableTypeBuffer.Title = domainDamageType.Attributes.Title
   
   return &tableTypeBuffer
}
