//*** CAUTION ***
//This is an autogenerated file produced by regenerateBackend.py.
//Edits made here will not persist after backend regeneration.

package generatedDTOs

import (
   types "AdventureEngineServer/generatedDatabaseTypes"
   
   
   "gorm.io/gorm"
   "reflect"
   "slices"
)

type DomainCharacterStatDTOAttributes struct {
   Abbreviation string
   Description *string
   
   IsActive *bool
   IsBaseStat bool
   Title *string
   UsesAction *bool
   UsesBonusAction *bool
}

type DomainCharacterStatDTOManyToOneRelationships struct {
}

type DomainCharacterStatDTOOneToManyRelationships struct {
}

type DomainCharacterStatDTORelationships struct {
   ManyToOne DomainCharacterStatDTOManyToOneRelationships
   OneToMany DomainCharacterStatDTOOneToManyRelationships
}

type DomainCharacterStatDTO struct {
   Id *float64
   
   Attributes DomainCharacterStatDTOAttributes
   
   Relationships DomainCharacterStatDTORelationships
}

func DomainCharacterStatToDomainCharacterStatDTO(db *gorm.DB, domainCharacterStat *types.DomainCharacterStat, traversedTables []string) *DomainCharacterStatDTO {
   
   if (slices.Contains(traversedTables, reflect.TypeOf(*domainCharacterStat).Name())) {
      print("Hit circular catch case for table DomainCharacterStat\n")
      return nil
   }
   
   traversedTables = append(traversedTables, reflect.TypeOf(*domainCharacterStat).Name())
   
   
   
   return &DomainCharacterStatDTO{
      Id: domainCharacterStat.Id,
      Attributes: DomainCharacterStatDTOAttributes{
         Abbreviation: domainCharacterStat.Abbreviation,
         Description: domainCharacterStat.Description,
         
         IsActive: domainCharacterStat.IsActive,
         IsBaseStat: domainCharacterStat.IsBaseStat,
         Title: domainCharacterStat.Title,
         UsesAction: domainCharacterStat.UsesAction,
         UsesBonusAction: domainCharacterStat.UsesBonusAction,
      },
      Relationships: DomainCharacterStatDTORelationships{
         ManyToOne: DomainCharacterStatDTOManyToOneRelationships {
         },
         OneToMany: DomainCharacterStatDTOOneToManyRelationships {
         },
      },
   }
}

func DomainCharacterStatDTOToDomainCharacterStat(domainCharacterStat *DomainCharacterStatDTO) types.DomainCharacterStat {
   return types.DomainCharacterStat{
      Id: domainCharacterStat.Id,
      Abbreviation: domainCharacterStat.Attributes.Abbreviation,
      Description: domainCharacterStat.Attributes.Description,
      
      IsActive: domainCharacterStat.Attributes.IsActive,
      IsBaseStat: domainCharacterStat.Attributes.IsBaseStat,
      Title: domainCharacterStat.Attributes.Title,
      UsesAction: domainCharacterStat.Attributes.UsesAction,
      UsesBonusAction: domainCharacterStat.Attributes.UsesBonusAction,
   }
}
