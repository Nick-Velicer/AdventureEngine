//*** CAUTION ***
//This is an autogenerated file produced by regenerateBackend.py.
//Edits made here will not persist after backend regeneration.

package generatedDTOs

import (
   types "AdventureEngineServer/generatedDatabaseTypes"
   
   
   "gorm.io/gorm"
   "reflect"
   "slices"
)

type DomainDiceDTOAttributes struct {
   Description *string
   
   IsActive *bool
   Maximum float64
   Minimum float64
   Title *string
}

type DomainDiceDTOManyToOneRelationships struct {
}

type DomainDiceDTOOneToManyRelationships struct {
}

type DomainDiceDTORelationships struct {
   ManyToOne DomainDiceDTOManyToOneRelationships
   OneToMany DomainDiceDTOOneToManyRelationships
}

type DomainDiceDTO struct {
   Id *int
   
   Attributes DomainDiceDTOAttributes
   
   Relationships DomainDiceDTORelationships
}

func DomainDiceToDomainDiceDTO(db *gorm.DB, domainDice *types.DomainDice, traversedTables []string) *DomainDiceDTO {
   
   if (domainDice == nil) {
      print("Nil pointer passed to DTO conversion for table DomainDice\n")
      return nil
   }
   
   if (slices.Contains(traversedTables, reflect.TypeOf(*domainDice).Name())) {
      print("Hit circular catch case for table DomainDice\n")
      return nil
   }
   
   traversedTables = append(traversedTables, reflect.TypeOf(*domainDice).Name())
   
   
   
   return &DomainDiceDTO{
      Id: domainDice.Id,
      Attributes: DomainDiceDTOAttributes{
         Description: domainDice.Description,
         
         IsActive: domainDice.IsActive,
         Maximum: domainDice.Maximum,
         Minimum: domainDice.Minimum,
         Title: domainDice.Title,
      },
      Relationships: DomainDiceDTORelationships{
         ManyToOne: DomainDiceDTOManyToOneRelationships {
         },
         OneToMany: DomainDiceDTOOneToManyRelationships {
         },
      },
   }
}

func DomainDiceDTOToDomainDice(domainDice *DomainDiceDTO) types.DomainDice {
   var tableTypeBuffer types.DomainDice
   
   tableTypeBuffer.Id = domainDice.Id
   tableTypeBuffer.Description = domainDice.Attributes.Description
   
   tableTypeBuffer.IsActive = domainDice.Attributes.IsActive
   tableTypeBuffer.Maximum = domainDice.Attributes.Maximum
   tableTypeBuffer.Minimum = domainDice.Attributes.Minimum
   tableTypeBuffer.Title = domainDice.Attributes.Title
   
   return tableTypeBuffer
}
