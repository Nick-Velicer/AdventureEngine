//*** CAUTION ***
//This is an autogenerated file produced by regenerateBackend.py.
//Edits made here will not persist after backend regeneration.

package generatedDTOs

import (
   types "AdventureEngineServer/generatedDatabaseTypes"
   
   services "AdventureEngineServer/generatedServices"
   "gorm.io/gorm"
   "reflect"
   "slices"
)

type CharacterDomainCharacterStatInstanceDTOAttributes struct {
   AbbreviatedTitle *string
   Description *string
   
   IsActive *bool
   Title *string
   Value float64
}

type CharacterDomainCharacterStatInstanceDTOManyToOneRelationships struct {
   Character__Character *CharacterDTO
   Stat__DomainCharacterStat *DomainCharacterStatDTO
}

type CharacterDomainCharacterStatInstanceDTOOneToManyRelationships struct {
}

type CharacterDomainCharacterStatInstanceDTORelationships struct {
   ManyToOne CharacterDomainCharacterStatInstanceDTOManyToOneRelationships
   OneToMany CharacterDomainCharacterStatInstanceDTOOneToManyRelationships
}

type CharacterDomainCharacterStatInstanceDTO struct {
   Id *int
   
   Attributes CharacterDomainCharacterStatInstanceDTOAttributes
   
   Relationships CharacterDomainCharacterStatInstanceDTORelationships
}

func CharacterDomainCharacterStatInstanceToCharacterDomainCharacterStatInstanceDTO(db *gorm.DB, characterDomainCharacterStatInstance *types.CharacterDomainCharacterStatInstance, traversedTables []string) *CharacterDomainCharacterStatInstanceDTO {
   
   if (characterDomainCharacterStatInstance == nil) {
      print("Nil pointer passed to DTO conversion for table CharacterDomainCharacterStatInstance\n")
      return nil
   }
   
   if (slices.Contains(traversedTables, reflect.TypeOf(*characterDomainCharacterStatInstance).Name())) {
      print("Hit circular catch case for table CharacterDomainCharacterStatInstance\n")
      return nil
   }
   
   traversedTables = append(traversedTables, reflect.TypeOf(*characterDomainCharacterStatInstance).Name())
   
   var includedCharacter__Character *types.Character
   var includedStat__DomainCharacterStat *types.DomainCharacterStat
   
   if (characterDomainCharacterStatInstance.Character__Character != nil) {
      services.GetCharacterById(db, int(*characterDomainCharacterStatInstance.Character__Character), includedCharacter__Character)
   }

   if (characterDomainCharacterStatInstance.Stat__DomainCharacterStat != nil) {
      services.GetDomainCharacterStatById(db, int(*characterDomainCharacterStatInstance.Stat__DomainCharacterStat), includedStat__DomainCharacterStat)
   }

   
   return &CharacterDomainCharacterStatInstanceDTO{
      Id: characterDomainCharacterStatInstance.Id,
      Attributes: CharacterDomainCharacterStatInstanceDTOAttributes{
         AbbreviatedTitle: characterDomainCharacterStatInstance.AbbreviatedTitle,
         Description: characterDomainCharacterStatInstance.Description,
         
         IsActive: characterDomainCharacterStatInstance.IsActive,
         Title: characterDomainCharacterStatInstance.Title,
         Value: characterDomainCharacterStatInstance.Value,
      },
      Relationships: CharacterDomainCharacterStatInstanceDTORelationships{
         ManyToOne: CharacterDomainCharacterStatInstanceDTOManyToOneRelationships {
            Character__Character: CharacterToCharacterDTO(db, includedCharacter__Character, traversedTables),
            Stat__DomainCharacterStat: DomainCharacterStatToDomainCharacterStatDTO(db, includedStat__DomainCharacterStat, traversedTables),
         },
         OneToMany: CharacterDomainCharacterStatInstanceDTOOneToManyRelationships {
         },
      },
   }
}

func CharacterDomainCharacterStatInstanceDTOToCharacterDomainCharacterStatInstance(characterDomainCharacterStatInstance *CharacterDomainCharacterStatInstanceDTO) *types.CharacterDomainCharacterStatInstance {
   var tableTypeBuffer types.CharacterDomainCharacterStatInstance
   
   tableTypeBuffer.Id = characterDomainCharacterStatInstance.Id
   tableTypeBuffer.AbbreviatedTitle = characterDomainCharacterStatInstance.Attributes.AbbreviatedTitle
   tableTypeBuffer.Description = characterDomainCharacterStatInstance.Attributes.Description
   
   tableTypeBuffer.IsActive = characterDomainCharacterStatInstance.Attributes.IsActive
   tableTypeBuffer.Title = characterDomainCharacterStatInstance.Attributes.Title
   tableTypeBuffer.Value = characterDomainCharacterStatInstance.Attributes.Value
   
   if (characterDomainCharacterStatInstance.Relationships.ManyToOne.Character__Character != nil) {
      tableTypeBuffer.Character__Character = characterDomainCharacterStatInstance.Relationships.ManyToOne.Character__Character.Id
   }

   if (characterDomainCharacterStatInstance.Relationships.ManyToOne.Stat__DomainCharacterStat != nil) {
      tableTypeBuffer.Stat__DomainCharacterStat = characterDomainCharacterStatInstance.Relationships.ManyToOne.Stat__DomainCharacterStat.Id
   }

   return &tableTypeBuffer
}
