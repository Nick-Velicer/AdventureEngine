//*** CAUTION ***
//This is an autogenerated file produced by regenerateBackend.py.
//Edits made here will not persist after backend regeneration.

package generatedDTOs

import (
   types "AdventureEngineServer/generatedDatabaseTypes"
   
   services "AdventureEngineServer/generatedServices"
   "gorm.io/gorm"
   "reflect"
   "slices"
)

type CharacterDomainCharacterStatInstanceDTOAttributes struct {
   Description *string
   
   IsActive *bool
   Title *string
}

type CharacterDomainCharacterStatInstanceDTOManyToOneRelationships struct {
   Character__Character *CharacterDTO
   StatInstance__DomainCharacterStat *DomainCharacterStatDTO
}

type CharacterDomainCharacterStatInstanceDTOOneToManyRelationships struct {
}

type CharacterDomainCharacterStatInstanceDTORelationships struct {
   ManyToOne CharacterDomainCharacterStatInstanceDTOManyToOneRelationships
   OneToMany CharacterDomainCharacterStatInstanceDTOOneToManyRelationships
}

type CharacterDomainCharacterStatInstanceDTO struct {
   Id *float64
   
   Attributes CharacterDomainCharacterStatInstanceDTOAttributes
   
   Relationships CharacterDomainCharacterStatInstanceDTORelationships
}

func CharacterDomainCharacterStatInstanceToCharacterDomainCharacterStatInstanceDTO(db *gorm.DB, characterDomainCharacterStatInstance *types.CharacterDomainCharacterStatInstance, traversedTables []string) *CharacterDomainCharacterStatInstanceDTO {
   
   if (slices.Contains(traversedTables, reflect.TypeOf(*characterDomainCharacterStatInstance).Name())) {
      print("Hit circular catch case for table CharacterDomainCharacterStatInstance\n")
      return nil
   }
   
   traversedTables = append(traversedTables, reflect.TypeOf(*characterDomainCharacterStatInstance).Name())
   
   var includedCharacterCharacter types.Character
   var includedStatInstanceDomainCharacterStat types.DomainCharacterStat
   
   services.GetCharacterById(db, int(*characterDomainCharacterStatInstance.CharacterCharacter), &includedCharacterCharacter)
   services.GetDomainCharacterStatById(db, int(*characterDomainCharacterStatInstance.StatInstanceDomainCharacterStat), &includedStatInstanceDomainCharacterStat)
   
   return &CharacterDomainCharacterStatInstanceDTO{
      Id: characterDomainCharacterStatInstance.Id,
      Attributes: CharacterDomainCharacterStatInstanceDTOAttributes{
         Description: characterDomainCharacterStatInstance.Description,
         
         IsActive: characterDomainCharacterStatInstance.IsActive,
         Title: characterDomainCharacterStatInstance.Title,
      },
      Relationships: CharacterDomainCharacterStatInstanceDTORelationships{
         ManyToOne: CharacterDomainCharacterStatInstanceDTOManyToOneRelationships {
            Character__Character: CharacterToCharacterDTO(db, &includedCharacterCharacter, traversedTables),
            StatInstance__DomainCharacterStat: DomainCharacterStatToDomainCharacterStatDTO(db, &includedStatInstanceDomainCharacterStat, traversedTables),
         },
         OneToMany: CharacterDomainCharacterStatInstanceDTOOneToManyRelationships {
         },
      },
   }
}

func CharacterDomainCharacterStatInstanceDTOToCharacterDomainCharacterStatInstance(characterDomainCharacterStatInstance *CharacterDomainCharacterStatInstanceDTO) types.CharacterDomainCharacterStatInstance {
   return types.CharacterDomainCharacterStatInstance{
      Id: characterDomainCharacterStatInstance.Id,
      Description: characterDomainCharacterStatInstance.Attributes.Description,
      
      IsActive: characterDomainCharacterStatInstance.Attributes.IsActive,
      Title: characterDomainCharacterStatInstance.Attributes.Title,
      CharacterCharacter: characterDomainCharacterStatInstance.Relationships.ManyToOne.Character__Character.Id,
      StatInstanceDomainCharacterStat: characterDomainCharacterStatInstance.Relationships.ManyToOne.StatInstance__DomainCharacterStat.Id,
   }
}
