//*** CAUTION ***
//This is an autogenerated file produced by regenerateBackend.py.
//Edits made here will not persist after backend regeneration.

package generatedDTOs

import (
   types "AdventureEngineServer/generatedDatabaseTypes"
   
   services "AdventureEngineServer/generatedServices"
   "gorm.io/gorm"
   "reflect"
   "slices"
)

type DomainDiceRollSubTypeDTOAttributes struct {
   AbbreviatedTitle *string
   Description *string
   
   IsActive *bool
   Title *string
}

type DomainDiceRollSubTypeDTOManyToOneRelationships struct {
   SuperType__DomainDiceRollType *DomainDiceRollTypeDTO
}

type DomainDiceRollSubTypeDTOOneToManyRelationships struct {
}

type DomainDiceRollSubTypeDTORelationships struct {
   ManyToOne DomainDiceRollSubTypeDTOManyToOneRelationships
   OneToMany DomainDiceRollSubTypeDTOOneToManyRelationships
}

type DomainDiceRollSubTypeDTO struct {
   Id *int
   
   Attributes DomainDiceRollSubTypeDTOAttributes
   
   Relationships DomainDiceRollSubTypeDTORelationships
}

func DomainDiceRollSubTypeToDomainDiceRollSubTypeDTO(db *gorm.DB, domainDiceRollSubType *types.DomainDiceRollSubType, traversedTables []string) *DomainDiceRollSubTypeDTO {
   
   if (domainDiceRollSubType == nil) {
      print("Nil pointer passed to DTO conversion for table DomainDiceRollSubType\n")
      return nil
   }
   
   if (slices.Contains(traversedTables, reflect.TypeOf(*domainDiceRollSubType).Name())) {
      print("Hit circular catch case for table DomainDiceRollSubType\n")
      return nil
   }
   
   traversedTables = append(traversedTables, reflect.TypeOf(*domainDiceRollSubType).Name())
   
   var includedSuperType__DomainDiceRollType *types.DomainDiceRollType
   
   if (domainDiceRollSubType.SuperType__DomainDiceRollType != nil) {
      services.GetDomainDiceRollTypeById(db, int(*domainDiceRollSubType.SuperType__DomainDiceRollType), includedSuperType__DomainDiceRollType)
   }

   
   return &DomainDiceRollSubTypeDTO{
      Id: domainDiceRollSubType.Id,
      Attributes: DomainDiceRollSubTypeDTOAttributes{
         AbbreviatedTitle: domainDiceRollSubType.AbbreviatedTitle,
         Description: domainDiceRollSubType.Description,
         
         IsActive: domainDiceRollSubType.IsActive,
         Title: domainDiceRollSubType.Title,
      },
      Relationships: DomainDiceRollSubTypeDTORelationships{
         ManyToOne: DomainDiceRollSubTypeDTOManyToOneRelationships {
            SuperType__DomainDiceRollType: DomainDiceRollTypeToDomainDiceRollTypeDTO(db, includedSuperType__DomainDiceRollType, traversedTables),
         },
         OneToMany: DomainDiceRollSubTypeDTOOneToManyRelationships {
         },
      },
   }
}

func DomainDiceRollSubTypeDTOToDomainDiceRollSubType(domainDiceRollSubType *DomainDiceRollSubTypeDTO) *types.DomainDiceRollSubType {
   var tableTypeBuffer types.DomainDiceRollSubType
   
   tableTypeBuffer.Id = domainDiceRollSubType.Id
   tableTypeBuffer.AbbreviatedTitle = domainDiceRollSubType.Attributes.AbbreviatedTitle
   tableTypeBuffer.Description = domainDiceRollSubType.Attributes.Description
   
   tableTypeBuffer.IsActive = domainDiceRollSubType.Attributes.IsActive
   tableTypeBuffer.Title = domainDiceRollSubType.Attributes.Title
   
   if (domainDiceRollSubType.Relationships.ManyToOne.SuperType__DomainDiceRollType != nil) {
      tableTypeBuffer.SuperType__DomainDiceRollType = domainDiceRollSubType.Relationships.ManyToOne.SuperType__DomainDiceRollType.Id
   }

   return &tableTypeBuffer
}
