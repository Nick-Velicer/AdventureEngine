//*** CAUTION ***
//This is an autogenerated file produced by regenerateBackend.py.
//Edits made here will not persist after backend regeneration.

package generatedDTOs

import (
   types "AdventureEngineServer/generatedDatabaseTypes"
   
   services "AdventureEngineServer/generatedServices"
   "gorm.io/gorm"
   "reflect"
   "slices"
)

type CharacterDomainConditionInstanceDTOAttributes struct {
   AbbreviatedTitle *string
   Description *string
   
   IsActive *bool
   Source string
   Target string
   Title *string
}

type CharacterDomainConditionInstanceDTOManyToOneRelationships struct {
   Character__Character *CharacterDTO
   Condition__DomainCondition *DomainConditionDTO
}

type CharacterDomainConditionInstanceDTOOneToManyRelationships struct {
}

type CharacterDomainConditionInstanceDTORelationships struct {
   ManyToOne CharacterDomainConditionInstanceDTOManyToOneRelationships
   OneToMany CharacterDomainConditionInstanceDTOOneToManyRelationships
}

type CharacterDomainConditionInstanceDTO struct {
   Id *int
   
   Attributes CharacterDomainConditionInstanceDTOAttributes
   
   Relationships CharacterDomainConditionInstanceDTORelationships
}

func CharacterDomainConditionInstanceToCharacterDomainConditionInstanceDTO(db *gorm.DB, characterDomainConditionInstance *types.CharacterDomainConditionInstance, traversedTables []string) *CharacterDomainConditionInstanceDTO {
   
   if (characterDomainConditionInstance == nil) {
      print("Nil pointer passed to DTO conversion for table CharacterDomainConditionInstance\n")
      return nil
   }
   
   if (slices.Contains(traversedTables, reflect.TypeOf(*characterDomainConditionInstance).Name())) {
      print("Hit circular catch case for table CharacterDomainConditionInstance\n")
      return nil
   }
   
   traversedTables = append(traversedTables, reflect.TypeOf(*characterDomainConditionInstance).Name())
   
   var includedCharacter__Character *types.Character
   var includedCondition__DomainCondition *types.DomainCondition
   
   if (characterDomainConditionInstance.Character__Character != nil) {
      services.GetCharacterById(db, int(*characterDomainConditionInstance.Character__Character), includedCharacter__Character)
   }

   if (characterDomainConditionInstance.Condition__DomainCondition != nil) {
      services.GetDomainConditionById(db, int(*characterDomainConditionInstance.Condition__DomainCondition), includedCondition__DomainCondition)
   }

   
   return &CharacterDomainConditionInstanceDTO{
      Id: characterDomainConditionInstance.Id,
      Attributes: CharacterDomainConditionInstanceDTOAttributes{
         AbbreviatedTitle: characterDomainConditionInstance.AbbreviatedTitle,
         Description: characterDomainConditionInstance.Description,
         
         IsActive: characterDomainConditionInstance.IsActive,
         Source: characterDomainConditionInstance.Source,
         Target: characterDomainConditionInstance.Target,
         Title: characterDomainConditionInstance.Title,
      },
      Relationships: CharacterDomainConditionInstanceDTORelationships{
         ManyToOne: CharacterDomainConditionInstanceDTOManyToOneRelationships {
            Character__Character: CharacterToCharacterDTO(db, includedCharacter__Character, traversedTables),
            Condition__DomainCondition: DomainConditionToDomainConditionDTO(db, includedCondition__DomainCondition, traversedTables),
         },
         OneToMany: CharacterDomainConditionInstanceDTOOneToManyRelationships {
         },
      },
   }
}

func CharacterDomainConditionInstanceDTOToCharacterDomainConditionInstance(characterDomainConditionInstance *CharacterDomainConditionInstanceDTO) *types.CharacterDomainConditionInstance {
   var tableTypeBuffer types.CharacterDomainConditionInstance
   
   tableTypeBuffer.Id = characterDomainConditionInstance.Id
   tableTypeBuffer.AbbreviatedTitle = characterDomainConditionInstance.Attributes.AbbreviatedTitle
   tableTypeBuffer.Description = characterDomainConditionInstance.Attributes.Description
   
   tableTypeBuffer.IsActive = characterDomainConditionInstance.Attributes.IsActive
   tableTypeBuffer.Source = characterDomainConditionInstance.Attributes.Source
   tableTypeBuffer.Target = characterDomainConditionInstance.Attributes.Target
   tableTypeBuffer.Title = characterDomainConditionInstance.Attributes.Title
   
   if (characterDomainConditionInstance.Relationships.ManyToOne.Character__Character != nil) {
      tableTypeBuffer.Character__Character = characterDomainConditionInstance.Relationships.ManyToOne.Character__Character.Id
   }

   if (characterDomainConditionInstance.Relationships.ManyToOne.Condition__DomainCondition != nil) {
      tableTypeBuffer.Condition__DomainCondition = characterDomainConditionInstance.Relationships.ManyToOne.Condition__DomainCondition.Id
   }

   return &tableTypeBuffer
}
