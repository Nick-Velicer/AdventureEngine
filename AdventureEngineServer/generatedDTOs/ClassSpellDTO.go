//*** CAUTION ***
//This is an autogenerated file produced by regenerateBackend.py.
//Edits made here will not persist after backend regeneration.

package generatedDTOs

import (
   types "AdventureEngineServer/generatedDatabaseTypes"
   
   services "AdventureEngineServer/generatedServices"
   "gorm.io/gorm"
   "reflect"
   "slices"
)

type ClassSpellDTOAttributes struct {
   Description *string
   
   IsActive *bool
   Title *string
}

type ClassSpellDTOManyToOneRelationships struct {
   Class__DomainClass *DomainClassDTO
   Spell__DomainSpell *DomainSpellDTO
}

type ClassSpellDTOOneToManyRelationships struct {
}

type ClassSpellDTORelationships struct {
   ManyToOne ClassSpellDTOManyToOneRelationships
   OneToMany ClassSpellDTOOneToManyRelationships
}

type ClassSpellDTO struct {
   Id *int
   
   Attributes ClassSpellDTOAttributes
   
   Relationships ClassSpellDTORelationships
}

func ClassSpellToClassSpellDTO(db *gorm.DB, classSpell *types.ClassSpell, traversedTables []string) *ClassSpellDTO {
   
   if (classSpell == nil) {
      print("Nil pointer passed to DTO conversion for table ClassSpell\n")
      return nil
   }
   
   if (slices.Contains(traversedTables, reflect.TypeOf(*classSpell).Name())) {
      print("Hit circular catch case for table ClassSpell\n")
      return nil
   }
   
   traversedTables = append(traversedTables, reflect.TypeOf(*classSpell).Name())
   
   var includedClass__DomainClass *types.DomainClass
   var includedSpell__DomainSpell *types.DomainSpell
   
   if (classSpell.Class__DomainClass != nil) {
      services.GetDomainClassById(db, int(*classSpell.Class__DomainClass), includedClass__DomainClass)
   }

   if (classSpell.Spell__DomainSpell != nil) {
      services.GetDomainSpellById(db, int(*classSpell.Spell__DomainSpell), includedSpell__DomainSpell)
   }

   
   return &ClassSpellDTO{
      Id: classSpell.Id,
      Attributes: ClassSpellDTOAttributes{
         Description: classSpell.Description,
         
         IsActive: classSpell.IsActive,
         Title: classSpell.Title,
      },
      Relationships: ClassSpellDTORelationships{
         ManyToOne: ClassSpellDTOManyToOneRelationships {
            Class__DomainClass: DomainClassToDomainClassDTO(db, includedClass__DomainClass, traversedTables),
            Spell__DomainSpell: DomainSpellToDomainSpellDTO(db, includedSpell__DomainSpell, traversedTables),
         },
         OneToMany: ClassSpellDTOOneToManyRelationships {
         },
      },
   }
}

func ClassSpellDTOToClassSpell(classSpell *ClassSpellDTO) *types.ClassSpell {
   var tableTypeBuffer types.ClassSpell
   
   tableTypeBuffer.Id = classSpell.Id
   tableTypeBuffer.Description = classSpell.Attributes.Description
   
   tableTypeBuffer.IsActive = classSpell.Attributes.IsActive
   tableTypeBuffer.Title = classSpell.Attributes.Title
   
   if (classSpell.Relationships.ManyToOne.Class__DomainClass != nil) {
      tableTypeBuffer.Class__DomainClass = classSpell.Relationships.ManyToOne.Class__DomainClass.Id
   }

   if (classSpell.Relationships.ManyToOne.Spell__DomainSpell != nil) {
      tableTypeBuffer.Spell__DomainSpell = classSpell.Relationships.ManyToOne.Spell__DomainSpell.Id
   }

   return &tableTypeBuffer
}
