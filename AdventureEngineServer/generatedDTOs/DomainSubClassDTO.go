//*** CAUTION ***
//This is an autogenerated file produced by regenerateBackend.py.
//Edits made here will not persist after backend regeneration.

package generatedDTOs

import (
   types "AdventureEngineServer/generatedDatabaseTypes"
   
   services "AdventureEngineServer/generatedServices"
   "gorm.io/gorm"
   "reflect"
   "slices"
)

type DomainSubClassDTOAttributes struct {
   Description *string
   
   IsActive *bool
   Title *string
}

type DomainSubClassDTOManyToOneRelationships struct {
   ParentClass__DomainClass *DomainClassDTO
}

type DomainSubClassDTOOneToManyRelationships struct {
}

type DomainSubClassDTORelationships struct {
   ManyToOne DomainSubClassDTOManyToOneRelationships
   OneToMany DomainSubClassDTOOneToManyRelationships
}

type DomainSubClassDTO struct {
   Id *int
   
   Attributes DomainSubClassDTOAttributes
   
   Relationships DomainSubClassDTORelationships
}

func DomainSubClassToDomainSubClassDTO(db *gorm.DB, domainSubClass *types.DomainSubClass, traversedTables []string) *DomainSubClassDTO {
   
   if (domainSubClass == nil) {
      print("Nil pointer passed to DTO conversion for table DomainSubClass\n")
      return nil
   }
   
   if (slices.Contains(traversedTables, reflect.TypeOf(*domainSubClass).Name())) {
      print("Hit circular catch case for table DomainSubClass\n")
      return nil
   }
   
   traversedTables = append(traversedTables, reflect.TypeOf(*domainSubClass).Name())
   
   var includedParentClass__DomainClass *types.DomainClass
   
   if (domainSubClass.ParentClass__DomainClass != nil) {
      services.GetDomainClassById(db, int(*domainSubClass.ParentClass__DomainClass), includedParentClass__DomainClass)
   }

   
   return &DomainSubClassDTO{
      Id: domainSubClass.Id,
      Attributes: DomainSubClassDTOAttributes{
         Description: domainSubClass.Description,
         
         IsActive: domainSubClass.IsActive,
         Title: domainSubClass.Title,
      },
      Relationships: DomainSubClassDTORelationships{
         ManyToOne: DomainSubClassDTOManyToOneRelationships {
            ParentClass__DomainClass: DomainClassToDomainClassDTO(db, includedParentClass__DomainClass, traversedTables),
         },
         OneToMany: DomainSubClassDTOOneToManyRelationships {
         },
      },
   }
}

func DomainSubClassDTOToDomainSubClass(domainSubClass *DomainSubClassDTO) *types.DomainSubClass {
   var tableTypeBuffer types.DomainSubClass
   
   tableTypeBuffer.Id = domainSubClass.Id
   tableTypeBuffer.Description = domainSubClass.Attributes.Description
   
   tableTypeBuffer.IsActive = domainSubClass.Attributes.IsActive
   tableTypeBuffer.Title = domainSubClass.Attributes.Title
   
   if (domainSubClass.Relationships.ManyToOne.ParentClass__DomainClass != nil) {
      tableTypeBuffer.ParentClass__DomainClass = domainSubClass.Relationships.ManyToOne.ParentClass__DomainClass.Id
   }

   return &tableTypeBuffer
}
