//*** CAUTION ***
//This is an autogenerated file produced by regenerateBackend.py.
//Edits made here will not persist after backend regeneration.

package generatedDTOs

import (
   types "AdventureEngineServer/generatedDatabaseTypes"
   
   services "AdventureEngineServer/generatedServices"
   "gorm.io/gorm"
   "reflect"
   "slices"
)

type QuantifierDTOAttributes struct {
   Delta *float64
   Description *string
   
   ImpactsSelf *bool
   IntoInventory *bool
   IsAction *bool
   IsActive *bool
   IsBonusAction *bool
   Level1SpellSlots *float64
   Level2SpellSlots *float64
   Level3SpellSlots *float64
   Level4SpellSlots *float64
   Level5SpellSlots *float64
   Level6SpellSlots *float64
   Level7SpellSlots *float64
   Level8SpellSlots *float64
   Level9SpellSlots *float64
   LevelMaximumRequirement *float64
   LevelMinimumRequirement *float64
   Quantity *float64
   RefreshOnLongRest *bool
   RefreshOnShortRest *bool
   Title *string
   UntilLongRest *bool
   UntilShortRest *bool
}

type QuantifierDTOManyToOneRelationships struct {
   AddedSpell__DomainSpell *DomainSpellDTO
   Condition__DomainCondition *DomainConditionDTO
   DamageType__DomainDamageType *DomainDamageTypeDTO
   Effect__DomainStaticEffect *DomainStaticEffectDTO
   ResistanceType__DomainDamageType *DomainDamageTypeDTO
   Save__DomainCharacterStat *DomainCharacterStatDTO
   Target__DomainCharacterStat *DomainCharacterStatDTO
}

type QuantifierDTOOneToManyRelationships struct {
}

type QuantifierDTORelationships struct {
   ManyToOne QuantifierDTOManyToOneRelationships
   OneToMany QuantifierDTOOneToManyRelationships
}

type QuantifierDTO struct {
   Id *int
   
   Attributes QuantifierDTOAttributes
   
   Relationships QuantifierDTORelationships
}

func QuantifierToQuantifierDTO(db *gorm.DB, quantifier *types.Quantifier, traversedTables []string) *QuantifierDTO {
   
   if (quantifier == nil) {
      print("Nil pointer passed to DTO conversion for table Quantifier\n")
      return nil
   }
   
   if (slices.Contains(traversedTables, reflect.TypeOf(*quantifier).Name())) {
      print("Hit circular catch case for table Quantifier\n")
      return nil
   }
   
   traversedTables = append(traversedTables, reflect.TypeOf(*quantifier).Name())
   
   var includedAddedSpell__DomainSpell *types.DomainSpell
   var includedCondition__DomainCondition *types.DomainCondition
   var includedDamageType__DomainDamageType *types.DomainDamageType
   var includedEffect__DomainStaticEffect *types.DomainStaticEffect
   var includedResistanceType__DomainDamageType *types.DomainDamageType
   var includedSave__DomainCharacterStat *types.DomainCharacterStat
   var includedTarget__DomainCharacterStat *types.DomainCharacterStat
   
   if (quantifier.AddedSpell__DomainSpell != nil) {
      services.GetDomainSpellById(db, int(*quantifier.AddedSpell__DomainSpell), includedAddedSpell__DomainSpell)
   }

   if (quantifier.Condition__DomainCondition != nil) {
      services.GetDomainConditionById(db, int(*quantifier.Condition__DomainCondition), includedCondition__DomainCondition)
   }

   if (quantifier.DamageType__DomainDamageType != nil) {
      services.GetDomainDamageTypeById(db, int(*quantifier.DamageType__DomainDamageType), includedDamageType__DomainDamageType)
   }

   if (quantifier.Effect__DomainStaticEffect != nil) {
      services.GetDomainStaticEffectById(db, int(*quantifier.Effect__DomainStaticEffect), includedEffect__DomainStaticEffect)
   }

   if (quantifier.ResistanceType__DomainDamageType != nil) {
      services.GetDomainDamageTypeById(db, int(*quantifier.ResistanceType__DomainDamageType), includedResistanceType__DomainDamageType)
   }

   if (quantifier.Save__DomainCharacterStat != nil) {
      services.GetDomainCharacterStatById(db, int(*quantifier.Save__DomainCharacterStat), includedSave__DomainCharacterStat)
   }

   if (quantifier.Target__DomainCharacterStat != nil) {
      services.GetDomainCharacterStatById(db, int(*quantifier.Target__DomainCharacterStat), includedTarget__DomainCharacterStat)
   }

   
   return &QuantifierDTO{
      Id: quantifier.Id,
      Attributes: QuantifierDTOAttributes{
         Delta: quantifier.Delta,
         Description: quantifier.Description,
         
         ImpactsSelf: quantifier.ImpactsSelf,
         IntoInventory: quantifier.IntoInventory,
         IsAction: quantifier.IsAction,
         IsActive: quantifier.IsActive,
         IsBonusAction: quantifier.IsBonusAction,
         Level1SpellSlots: quantifier.Level1SpellSlots,
         Level2SpellSlots: quantifier.Level2SpellSlots,
         Level3SpellSlots: quantifier.Level3SpellSlots,
         Level4SpellSlots: quantifier.Level4SpellSlots,
         Level5SpellSlots: quantifier.Level5SpellSlots,
         Level6SpellSlots: quantifier.Level6SpellSlots,
         Level7SpellSlots: quantifier.Level7SpellSlots,
         Level8SpellSlots: quantifier.Level8SpellSlots,
         Level9SpellSlots: quantifier.Level9SpellSlots,
         LevelMaximumRequirement: quantifier.LevelMaximumRequirement,
         LevelMinimumRequirement: quantifier.LevelMinimumRequirement,
         Quantity: quantifier.Quantity,
         RefreshOnLongRest: quantifier.RefreshOnLongRest,
         RefreshOnShortRest: quantifier.RefreshOnShortRest,
         Title: quantifier.Title,
         UntilLongRest: quantifier.UntilLongRest,
         UntilShortRest: quantifier.UntilShortRest,
      },
      Relationships: QuantifierDTORelationships{
         ManyToOne: QuantifierDTOManyToOneRelationships {
            AddedSpell__DomainSpell: DomainSpellToDomainSpellDTO(db, includedAddedSpell__DomainSpell, traversedTables),
            Condition__DomainCondition: DomainConditionToDomainConditionDTO(db, includedCondition__DomainCondition, traversedTables),
            DamageType__DomainDamageType: DomainDamageTypeToDomainDamageTypeDTO(db, includedDamageType__DomainDamageType, traversedTables),
            Effect__DomainStaticEffect: DomainStaticEffectToDomainStaticEffectDTO(db, includedEffect__DomainStaticEffect, traversedTables),
            ResistanceType__DomainDamageType: DomainDamageTypeToDomainDamageTypeDTO(db, includedResistanceType__DomainDamageType, traversedTables),
            Save__DomainCharacterStat: DomainCharacterStatToDomainCharacterStatDTO(db, includedSave__DomainCharacterStat, traversedTables),
            Target__DomainCharacterStat: DomainCharacterStatToDomainCharacterStatDTO(db, includedTarget__DomainCharacterStat, traversedTables),
         },
         OneToMany: QuantifierDTOOneToManyRelationships {
         },
      },
   }
}

func QuantifierDTOToQuantifier(quantifier *QuantifierDTO) *types.Quantifier {
   var tableTypeBuffer types.Quantifier
   
   tableTypeBuffer.Id = quantifier.Id
   tableTypeBuffer.Delta = quantifier.Attributes.Delta
   tableTypeBuffer.Description = quantifier.Attributes.Description
   
   tableTypeBuffer.ImpactsSelf = quantifier.Attributes.ImpactsSelf
   tableTypeBuffer.IntoInventory = quantifier.Attributes.IntoInventory
   tableTypeBuffer.IsAction = quantifier.Attributes.IsAction
   tableTypeBuffer.IsActive = quantifier.Attributes.IsActive
   tableTypeBuffer.IsBonusAction = quantifier.Attributes.IsBonusAction
   tableTypeBuffer.Level1SpellSlots = quantifier.Attributes.Level1SpellSlots
   tableTypeBuffer.Level2SpellSlots = quantifier.Attributes.Level2SpellSlots
   tableTypeBuffer.Level3SpellSlots = quantifier.Attributes.Level3SpellSlots
   tableTypeBuffer.Level4SpellSlots = quantifier.Attributes.Level4SpellSlots
   tableTypeBuffer.Level5SpellSlots = quantifier.Attributes.Level5SpellSlots
   tableTypeBuffer.Level6SpellSlots = quantifier.Attributes.Level6SpellSlots
   tableTypeBuffer.Level7SpellSlots = quantifier.Attributes.Level7SpellSlots
   tableTypeBuffer.Level8SpellSlots = quantifier.Attributes.Level8SpellSlots
   tableTypeBuffer.Level9SpellSlots = quantifier.Attributes.Level9SpellSlots
   tableTypeBuffer.LevelMaximumRequirement = quantifier.Attributes.LevelMaximumRequirement
   tableTypeBuffer.LevelMinimumRequirement = quantifier.Attributes.LevelMinimumRequirement
   tableTypeBuffer.Quantity = quantifier.Attributes.Quantity
   tableTypeBuffer.RefreshOnLongRest = quantifier.Attributes.RefreshOnLongRest
   tableTypeBuffer.RefreshOnShortRest = quantifier.Attributes.RefreshOnShortRest
   tableTypeBuffer.Title = quantifier.Attributes.Title
   tableTypeBuffer.UntilLongRest = quantifier.Attributes.UntilLongRest
   tableTypeBuffer.UntilShortRest = quantifier.Attributes.UntilShortRest
   
   if (quantifier.Relationships.ManyToOne.AddedSpell__DomainSpell != nil) {
      tableTypeBuffer.AddedSpell__DomainSpell = quantifier.Relationships.ManyToOne.AddedSpell__DomainSpell.Id
   }

   if (quantifier.Relationships.ManyToOne.Condition__DomainCondition != nil) {
      tableTypeBuffer.Condition__DomainCondition = quantifier.Relationships.ManyToOne.Condition__DomainCondition.Id
   }

   if (quantifier.Relationships.ManyToOne.DamageType__DomainDamageType != nil) {
      tableTypeBuffer.DamageType__DomainDamageType = quantifier.Relationships.ManyToOne.DamageType__DomainDamageType.Id
   }

   if (quantifier.Relationships.ManyToOne.Effect__DomainStaticEffect != nil) {
      tableTypeBuffer.Effect__DomainStaticEffect = quantifier.Relationships.ManyToOne.Effect__DomainStaticEffect.Id
   }

   if (quantifier.Relationships.ManyToOne.ResistanceType__DomainDamageType != nil) {
      tableTypeBuffer.ResistanceType__DomainDamageType = quantifier.Relationships.ManyToOne.ResistanceType__DomainDamageType.Id
   }

   if (quantifier.Relationships.ManyToOne.Save__DomainCharacterStat != nil) {
      tableTypeBuffer.Save__DomainCharacterStat = quantifier.Relationships.ManyToOne.Save__DomainCharacterStat.Id
   }

   if (quantifier.Relationships.ManyToOne.Target__DomainCharacterStat != nil) {
      tableTypeBuffer.Target__DomainCharacterStat = quantifier.Relationships.ManyToOne.Target__DomainCharacterStat.Id
   }

   return &tableTypeBuffer
}
