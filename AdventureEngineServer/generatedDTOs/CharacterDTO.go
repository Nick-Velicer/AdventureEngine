//*** CAUTION ***
//This is an autogenerated file produced by regenerateBackend.py.
//Edits made here will not persist after backend regeneration.

package generatedDTOs

import (
   types "AdventureEngineServer/generatedDatabaseTypes"
   utils "AdventureEngineServer/utils"
   services "AdventureEngineServer/generatedServices"
   "gorm.io/gorm"
   "reflect"
   "slices"
)

type CharacterDTOAttributes struct {
   Description *string
   
   IsActive *bool
   Title *string
}

type CharacterDTORelationships struct {
   CampaignCampaign *CampaignDTO
   CurrentSizeDomainSize *DomainSizeDTO
   SpeciesDomainSpecies *DomainSpeciesDTO
   SubclassDomainSubClass *DomainSubClassDTO
   StatsCharacterDomainCharacterStatInstance []*CharacterDomainCharacterStatInstanceDTO
}

type CharacterDTO struct {
   Id *float64
   
   Attributes CharacterDTOAttributes
   
   Relationships CharacterDTORelationships
}

func CharacterToCharacterDTO(db *gorm.DB, character *types.Character, traversedTables []string) *CharacterDTO {
   
   if (slices.Contains(traversedTables, reflect.TypeOf(*character).Name())) {
      print("Hit circular catch case for table Character\n")
      return nil
   }
   
   traversedTables = append(traversedTables, reflect.TypeOf(*character).Name())
   
   var includedCampaignCampaign types.Campaign
   var includedCurrentSizeDomainSize types.DomainSize
   var includedSpeciesDomainSpecies types.DomainSpecies
   var includedSubclassDomainSubClass types.DomainSubClass
   var includedStatsCharacterDomainCharacterStatInstances []types.CharacterDomainCharacterStatInstance
   
   services.GetCampaignById(db, int(*character.CampaignCampaign), &includedCampaignCampaign)
   services.GetDomainSizeById(db, int(*character.CurrentSizeDomainSize), &includedCurrentSizeDomainSize)
   services.GetDomainSpeciesById(db, int(*character.SpeciesDomainSpecies), &includedSpeciesDomainSpecies)
   services.GetDomainSubClassById(db, int(*character.SubclassDomainSubClass), &includedSubclassDomainSubClass)
   services.GetCharacterDomainCharacterStatInstancesByCharacterId(db, int(*character.Id), &includedStatsCharacterDomainCharacterStatInstances)
   
   return &CharacterDTO{
      Id: character.Id,
      Attributes: CharacterDTOAttributes{
         Description: character.Description,
         
         IsActive: character.IsActive,
         Title: character.Title,
      },
      Relationships: CharacterDTORelationships{
         CampaignCampaign: CampaignToCampaignDTO(db, &includedCampaignCampaign, traversedTables),
         CurrentSizeDomainSize: DomainSizeToDomainSizeDTO(db, &includedCurrentSizeDomainSize, traversedTables),
         SpeciesDomainSpecies: DomainSpeciesToDomainSpeciesDTO(db, &includedSpeciesDomainSpecies, traversedTables),
         SubclassDomainSubClass: DomainSubClassToDomainSubClassDTO(db, &includedSubclassDomainSubClass, traversedTables),
         StatsCharacterDomainCharacterStatInstance: utils.Map(includedStatsCharacterDomainCharacterStatInstances, func(relationshipElement types.CharacterDomainCharacterStatInstance) *CharacterDomainCharacterStatInstanceDTO { return CharacterDomainCharacterStatInstanceToCharacterDomainCharacterStatInstanceDTO(db, &relationshipElement, traversedTables) }),
      },
   }
}

func CharacterDTOToCharacter(character *CharacterDTO) types.Character {
   return types.Character{
      Id: character.Id,
      Description: character.Attributes.Description,
      
      IsActive: character.Attributes.IsActive,
      Title: character.Attributes.Title,
      CampaignCampaign: character.Relationships.CampaignCampaign.Id,
      CurrentSizeDomainSize: character.Relationships.CurrentSizeDomainSize.Id,
      SpeciesDomainSpecies: character.Relationships.SpeciesDomainSpecies.Id,
      SubclassDomainSubClass: character.Relationships.SubclassDomainSubClass.Id,
   }
}
