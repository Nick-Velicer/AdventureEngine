//*** CAUTION ***
//This is an autogenerated file produced by regenerateBackend.py.
//Edits made here will not persist after backend regeneration.

package generatedDTOs

import (
   types "AdventureEngineServer/generatedDatabaseTypes"
   utils "AdventureEngineServer/utils"
   services "AdventureEngineServer/generatedServices"
   "gorm.io/gorm"
   "reflect"
   "slices"
)

type CharacterDTOAttributes struct {
   Description *string
   
   IsActive *bool
   Title *string
}

type CharacterDTOManyToOneRelationships struct {
   Campaign__Campaign *CampaignDTO
   CurrentSize__DomainSize *DomainSizeDTO
   Species__DomainSpecies *DomainSpeciesDTO
   Subclass__DomainSubClass *DomainSubClassDTO
}

type CharacterDTOOneToManyRelationships struct {
   Stats__CharacterDomainCharacterStatInstance []*CharacterDomainCharacterStatInstanceDTO
}

type CharacterDTORelationships struct {
   ManyToOne CharacterDTOManyToOneRelationships
   OneToMany CharacterDTOOneToManyRelationships
}

type CharacterDTO struct {
   Id *float64
   
   Attributes CharacterDTOAttributes
   
   Relationships CharacterDTORelationships
}

func CharacterToCharacterDTO(db *gorm.DB, character *types.Character, traversedTables []string) *CharacterDTO {
   
   if (character == nil) {
      print("No valid pointer passed to DTO conversion for table Character")
      return nil
   }
   
   if (slices.Contains(traversedTables, reflect.TypeOf(*character).Name())) {
      print("Hit circular catch case for table Character\n")
      return nil
   }
   
   traversedTables = append(traversedTables, reflect.TypeOf(*character).Name())
   
   var includedCampaign__Campaign types.Campaign
   var includedCurrentSize__DomainSize types.DomainSize
   var includedSpecies__DomainSpecies types.DomainSpecies
   var includedSubclass__DomainSubClass types.DomainSubClass
   var includedStats__CharacterDomainCharacterStatInstances []types.CharacterDomainCharacterStatInstance
   
   if (character.Campaign__Campaign != nil) {
      services.GetCampaignById(db, int(*character.Campaign__Campaign), &includedCampaign__Campaign)
   }

   if (character.CurrentSize__DomainSize != nil) {
      services.GetDomainSizeById(db, int(*character.CurrentSize__DomainSize), &includedCurrentSize__DomainSize)
   }

   if (character.Species__DomainSpecies != nil) {
      services.GetDomainSpeciesById(db, int(*character.Species__DomainSpecies), &includedSpecies__DomainSpecies)
   }

   if (character.Subclass__DomainSubClass != nil) {
      services.GetDomainSubClassById(db, int(*character.Subclass__DomainSubClass), &includedSubclass__DomainSubClass)
   }

   if (slices.Contains(traversedTables, reflect.TypeOf(includedStats__CharacterDomainCharacterStatInstances).Elem().Name())) {
      services.GetCharacterDomainCharacterStatInstancesByCharacterId(db, int(*character.Id), &includedStats__CharacterDomainCharacterStatInstances)
   } else {
      includedStats__CharacterDomainCharacterStatInstances = []types.CharacterDomainCharacterStatInstance{}
      print("Hit circular catch case for table CharacterDomainCharacterStatInstance\n")
   }

   
   return &CharacterDTO{
      Id: character.Id,
      Attributes: CharacterDTOAttributes{
         Description: character.Description,
         
         IsActive: character.IsActive,
         Title: character.Title,
      },
      Relationships: CharacterDTORelationships{
         ManyToOne: CharacterDTOManyToOneRelationships {
            Campaign__Campaign: CampaignToCampaignDTO(db, &includedCampaign__Campaign, traversedTables),
            CurrentSize__DomainSize: DomainSizeToDomainSizeDTO(db, &includedCurrentSize__DomainSize, traversedTables),
            Species__DomainSpecies: DomainSpeciesToDomainSpeciesDTO(db, &includedSpecies__DomainSpecies, traversedTables),
            Subclass__DomainSubClass: DomainSubClassToDomainSubClassDTO(db, &includedSubclass__DomainSubClass, traversedTables),
         },
         OneToMany: CharacterDTOOneToManyRelationships {
            Stats__CharacterDomainCharacterStatInstance: utils.Map(includedStats__CharacterDomainCharacterStatInstances, func(relationshipElement types.CharacterDomainCharacterStatInstance) *CharacterDomainCharacterStatInstanceDTO { return CharacterDomainCharacterStatInstanceToCharacterDomainCharacterStatInstanceDTO(db, &relationshipElement, traversedTables) }),
         },
      },
   }
}

func CharacterDTOToCharacter(character *CharacterDTO) types.Character {
   return types.Character{
      Id: character.Id,
      Description: character.Attributes.Description,
      
      IsActive: character.Attributes.IsActive,
      Title: character.Attributes.Title,
      Campaign__Campaign: character.Relationships.ManyToOne.Campaign__Campaign.Id,
      CurrentSize__DomainSize: character.Relationships.ManyToOne.CurrentSize__DomainSize.Id,
      Species__DomainSpecies: character.Relationships.ManyToOne.Species__DomainSpecies.Id,
      Subclass__DomainSubClass: character.Relationships.ManyToOne.Subclass__DomainSubClass.Id,
   }
}
