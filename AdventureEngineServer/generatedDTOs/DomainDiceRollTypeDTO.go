//*** CAUTION ***
//This is an autogenerated file produced by regenerateBackend.py.
//Edits made here will not persist after backend regeneration.

package generatedDTOs

import (
   types "AdventureEngineServer/generatedDatabaseTypes"
   utils "AdventureEngineServer/utils"
   services "AdventureEngineServer/generatedServices"
   "gorm.io/gorm"
   "reflect"
   "slices"
)

type DomainDiceRollTypeDTOAttributes struct {
   AbbreviatedTitle *string
   Description *string
   
   IsActive *bool
   Title *string
}

type DomainDiceRollTypeDTOManyToOneRelationships struct {
}

type DomainDiceRollTypeDTOOneToManyRelationships struct {
   Variants__DomainDiceRollSubType []*DomainDiceRollSubTypeDTO
}

type DomainDiceRollTypeDTORelationships struct {
   ManyToOne DomainDiceRollTypeDTOManyToOneRelationships
   OneToMany DomainDiceRollTypeDTOOneToManyRelationships
}

type DomainDiceRollTypeDTO struct {
   Id *int
   
   Attributes DomainDiceRollTypeDTOAttributes
   
   Relationships DomainDiceRollTypeDTORelationships
}

func DomainDiceRollTypeToDomainDiceRollTypeDTO(db *gorm.DB, domainDiceRollType *types.DomainDiceRollType, traversedTables []string) *DomainDiceRollTypeDTO {
   
   if (domainDiceRollType == nil) {
      print("Nil pointer passed to DTO conversion for table DomainDiceRollType\n")
      return nil
   }
   
   if (slices.Contains(traversedTables, reflect.TypeOf(*domainDiceRollType).Name())) {
      print("Hit circular catch case for table DomainDiceRollType\n")
      return nil
   }
   
   traversedTables = append(traversedTables, reflect.TypeOf(*domainDiceRollType).Name())
   
   var includedVariants__DomainDiceRollSubTypes []types.DomainDiceRollSubType
   
   if (slices.Contains(traversedTables, reflect.TypeOf(includedVariants__DomainDiceRollSubTypes).Elem().Name())) {
      services.GetDomainDiceRollSubTypesByDomainDiceRollTypeId(db, int(*domainDiceRollType.Id), &includedVariants__DomainDiceRollSubTypes)
   } else {
      includedVariants__DomainDiceRollSubTypes = []types.DomainDiceRollSubType{}
      print("Hit circular catch case for table DomainDiceRollSubType\n")
   }

   
   return &DomainDiceRollTypeDTO{
      Id: domainDiceRollType.Id,
      Attributes: DomainDiceRollTypeDTOAttributes{
         AbbreviatedTitle: domainDiceRollType.AbbreviatedTitle,
         Description: domainDiceRollType.Description,
         
         IsActive: domainDiceRollType.IsActive,
         Title: domainDiceRollType.Title,
      },
      Relationships: DomainDiceRollTypeDTORelationships{
         ManyToOne: DomainDiceRollTypeDTOManyToOneRelationships {
         },
         OneToMany: DomainDiceRollTypeDTOOneToManyRelationships {
            Variants__DomainDiceRollSubType: utils.Map(includedVariants__DomainDiceRollSubTypes, func(relationshipElement types.DomainDiceRollSubType) *DomainDiceRollSubTypeDTO { return DomainDiceRollSubTypeToDomainDiceRollSubTypeDTO(db, &relationshipElement, traversedTables) }),
         },
      },
   }
}

func DomainDiceRollTypeDTOToDomainDiceRollType(domainDiceRollType *DomainDiceRollTypeDTO) *types.DomainDiceRollType {
   var tableTypeBuffer types.DomainDiceRollType
   
   tableTypeBuffer.Id = domainDiceRollType.Id
   tableTypeBuffer.AbbreviatedTitle = domainDiceRollType.Attributes.AbbreviatedTitle
   tableTypeBuffer.Description = domainDiceRollType.Attributes.Description
   
   tableTypeBuffer.IsActive = domainDiceRollType.Attributes.IsActive
   tableTypeBuffer.Title = domainDiceRollType.Attributes.Title
   
   return &tableTypeBuffer
}
