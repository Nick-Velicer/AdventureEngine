//*** CAUTION ***
//This is an autogenerated file produced by regenerateBackend.py.
//Edits made here will not persist after backend regeneration.

package generatedDTOs

import (
   types "AdventureEngineServer/generatedDatabaseTypes"
   
   
   "gorm.io/gorm"
   "reflect"
   "slices"
)

type DomainDiceRollTypeDTOAttributes struct {
   Description *string
   
   IsActive *bool
   Title *string
}

type DomainDiceRollTypeDTOManyToOneRelationships struct {
}

type DomainDiceRollTypeDTOOneToManyRelationships struct {
}

type DomainDiceRollTypeDTORelationships struct {
   ManyToOne DomainDiceRollTypeDTOManyToOneRelationships
   OneToMany DomainDiceRollTypeDTOOneToManyRelationships
}

type DomainDiceRollTypeDTO struct {
   Id *float64
   
   Attributes DomainDiceRollTypeDTOAttributes
   
   Relationships DomainDiceRollTypeDTORelationships
}

func DomainDiceRollTypeToDomainDiceRollTypeDTO(db *gorm.DB, domainDiceRollType *types.DomainDiceRollType, traversedTables []string) *DomainDiceRollTypeDTO {
   
   if (domainDiceRollType == nil) {
      print("No valid pointer passed to DTO conversion for table DomainDiceRollType")
      return nil
   }
   
   if (slices.Contains(traversedTables, reflect.TypeOf(*domainDiceRollType).Name())) {
      print("Hit circular catch case for table DomainDiceRollType\n")
      return nil
   }
   
   traversedTables = append(traversedTables, reflect.TypeOf(*domainDiceRollType).Name())
   
   
   
   return &DomainDiceRollTypeDTO{
      Id: domainDiceRollType.Id,
      Attributes: DomainDiceRollTypeDTOAttributes{
         Description: domainDiceRollType.Description,
         
         IsActive: domainDiceRollType.IsActive,
         Title: domainDiceRollType.Title,
      },
      Relationships: DomainDiceRollTypeDTORelationships{
         ManyToOne: DomainDiceRollTypeDTOManyToOneRelationships {
         },
         OneToMany: DomainDiceRollTypeDTOOneToManyRelationships {
         },
      },
   }
}

func DomainDiceRollTypeDTOToDomainDiceRollType(domainDiceRollType *DomainDiceRollTypeDTO) types.DomainDiceRollType {
   return types.DomainDiceRollType{
      Id: domainDiceRollType.Id,
      Description: domainDiceRollType.Attributes.Description,
      
      IsActive: domainDiceRollType.Attributes.IsActive,
      Title: domainDiceRollType.Attributes.Title,
   }
}
