//*** CAUTION ***
//This is an autogenerated file produced by regenerateBackend.py.
//Edits made here will not persist after backend regeneration.

package generatedDTOs

import (
   types "AdventureEngineServer/generatedDatabaseTypes"
   
   
   "gorm.io/gorm"
   "reflect"
   "slices"
)

type DomainActionDTOAttributes struct {
   Description *string
   
   IsActive *bool
   Title *string
   UsesAction *bool
   UsesBonusAction *bool
}

type DomainActionDTOManyToOneRelationships struct {
}

type DomainActionDTOOneToManyRelationships struct {
}

type DomainActionDTORelationships struct {
   ManyToOne DomainActionDTOManyToOneRelationships
   OneToMany DomainActionDTOOneToManyRelationships
}

type DomainActionDTO struct {
   Id *float64
   
   Attributes DomainActionDTOAttributes
   
   Relationships DomainActionDTORelationships
}

func DomainActionToDomainActionDTO(db *gorm.DB, domainAction *types.DomainAction, traversedTables []string) *DomainActionDTO {
   
   if (domainAction == nil) {
      print("Nil pointer passed to DTO conversion for table DomainAction")
      return nil
   }
   
   if (slices.Contains(traversedTables, reflect.TypeOf(*domainAction).Name())) {
      print("Hit circular catch case for table DomainAction\n")
      return nil
   }
   
   traversedTables = append(traversedTables, reflect.TypeOf(*domainAction).Name())
   
   
   
   return &DomainActionDTO{
      Id: domainAction.Id,
      Attributes: DomainActionDTOAttributes{
         Description: domainAction.Description,
         
         IsActive: domainAction.IsActive,
         Title: domainAction.Title,
         UsesAction: domainAction.UsesAction,
         UsesBonusAction: domainAction.UsesBonusAction,
      },
      Relationships: DomainActionDTORelationships{
         ManyToOne: DomainActionDTOManyToOneRelationships {
         },
         OneToMany: DomainActionDTOOneToManyRelationships {
         },
      },
   }
}

func DomainActionDTOToDomainAction(domainAction *DomainActionDTO) types.DomainAction {
   var tableTypeBuffer types.DomainAction
   
   tableTypeBuffer.Id = domainAction.Id
   tableTypeBuffer.Description = domainAction.Attributes.Description
   
   tableTypeBuffer.IsActive = domainAction.Attributes.IsActive
   tableTypeBuffer.Title = domainAction.Attributes.Title
   tableTypeBuffer.UsesAction = domainAction.Attributes.UsesAction
   tableTypeBuffer.UsesBonusAction = domainAction.Attributes.UsesBonusAction
   
   return tableTypeBuffer
}
