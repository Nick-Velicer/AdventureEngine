//*** CAUTION ***
//This is an autogenerated file produced by regenerateBackend.py.
//Edits made here will not persist after backend regeneration.

package generatedDTOs

import (
   types "AdventureEngineServer/generatedDatabaseTypes"
   utils "AdventureEngineServer/utils"
   services "AdventureEngineServer/generatedServices"
   "gorm.io/gorm"
   "reflect"
   "slices"
)

type DomainActionDTOAttributes struct {
   AbbreviatedTitle *string
   Description *string
   
   IsActive *bool
   Title *string
}

type DomainActionDTOManyToOneRelationships struct {
}

type DomainActionDTOOneToManyRelationships struct {
   Quantifiers__Quantifier []*QuantifierDTO
}

type DomainActionDTORelationships struct {
   ManyToOne DomainActionDTOManyToOneRelationships
   OneToMany DomainActionDTOOneToManyRelationships
}

type DomainActionDTO struct {
   Id *int
   
   Attributes DomainActionDTOAttributes
   
   Relationships DomainActionDTORelationships
}

func DomainActionToDomainActionDTO(db *gorm.DB, domainAction *types.DomainAction, traversedTables []string) *DomainActionDTO {
   
   if (domainAction == nil) {
      print("Nil pointer passed to DTO conversion for table DomainAction\n")
      return nil
   }
   
   if (slices.Contains(traversedTables, reflect.TypeOf(*domainAction).Name())) {
      print("Hit circular catch case for table DomainAction\n")
      return nil
   }
   
   traversedTables = append(traversedTables, reflect.TypeOf(*domainAction).Name())
   
   var includedQuantifiers__Quantifiers []types.Quantifier
   
   if (slices.Contains(traversedTables, reflect.TypeOf(includedQuantifiers__Quantifiers).Elem().Name())) {
      services.GetQuantifiersByDomainActionId(db, int(*domainAction.Id), &includedQuantifiers__Quantifiers)
   } else {
      includedQuantifiers__Quantifiers = []types.Quantifier{}
      print("Hit circular catch case for table Quantifier\n")
   }

   
   return &DomainActionDTO{
      Id: domainAction.Id,
      Attributes: DomainActionDTOAttributes{
         AbbreviatedTitle: domainAction.AbbreviatedTitle,
         Description: domainAction.Description,
         
         IsActive: domainAction.IsActive,
         Title: domainAction.Title,
      },
      Relationships: DomainActionDTORelationships{
         ManyToOne: DomainActionDTOManyToOneRelationships {
         },
         OneToMany: DomainActionDTOOneToManyRelationships {
            Quantifiers__Quantifier: utils.Map(includedQuantifiers__Quantifiers, func(relationshipElement types.Quantifier) *QuantifierDTO { return QuantifierToQuantifierDTO(db, &relationshipElement, traversedTables) }),
         },
      },
   }
}

func DomainActionDTOToDomainAction(domainAction *DomainActionDTO) *types.DomainAction {
   var tableTypeBuffer types.DomainAction
   
   tableTypeBuffer.Id = domainAction.Id
   tableTypeBuffer.AbbreviatedTitle = domainAction.Attributes.AbbreviatedTitle
   tableTypeBuffer.Description = domainAction.Attributes.Description
   
   tableTypeBuffer.IsActive = domainAction.Attributes.IsActive
   tableTypeBuffer.Title = domainAction.Attributes.Title
   
   return &tableTypeBuffer
}
