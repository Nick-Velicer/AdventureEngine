//*** CAUTION ***
//This is an autogenerated file produced by regenerateBackend.py.
//Edits made here will not persist after backend regeneration.

package generatedDTOs

import (
   types "AdventureEngineServer/generatedDatabaseTypes"
   
   
   "gorm.io/gorm"
   "reflect"
   "slices"
)

type DomainItemDTOAttributes struct {
   CustomEffectText *string
   Description *string
   
   IsActive *bool
   OneHandedQuantifier *float64
   Title *string
   TwoHandedQuantifier *float64
}

type DomainItemDTOManyToOneRelationships struct {
}

type DomainItemDTOOneToManyRelationships struct {
}

type DomainItemDTORelationships struct {
   ManyToOne DomainItemDTOManyToOneRelationships
   OneToMany DomainItemDTOOneToManyRelationships
}

type DomainItemDTO struct {
   Id *float64
   
   Attributes DomainItemDTOAttributes
   
   Relationships DomainItemDTORelationships
}

func DomainItemToDomainItemDTO(db *gorm.DB, domainItem *types.DomainItem, traversedTables []string) *DomainItemDTO {
   
   if (domainItem == nil) {
      print("No valid pointer passed to DTO conversion for table DomainItem")
      return nil
   }
   
   if (slices.Contains(traversedTables, reflect.TypeOf(*domainItem).Name())) {
      print("Hit circular catch case for table DomainItem\n")
      return nil
   }
   
   traversedTables = append(traversedTables, reflect.TypeOf(*domainItem).Name())
   
   
   
   return &DomainItemDTO{
      Id: domainItem.Id,
      Attributes: DomainItemDTOAttributes{
         CustomEffectText: domainItem.CustomEffectText,
         Description: domainItem.Description,
         
         IsActive: domainItem.IsActive,
         OneHandedQuantifier: domainItem.OneHandedQuantifier,
         Title: domainItem.Title,
         TwoHandedQuantifier: domainItem.TwoHandedQuantifier,
      },
      Relationships: DomainItemDTORelationships{
         ManyToOne: DomainItemDTOManyToOneRelationships {
         },
         OneToMany: DomainItemDTOOneToManyRelationships {
         },
      },
   }
}

func DomainItemDTOToDomainItem(domainItem *DomainItemDTO) types.DomainItem {
   return types.DomainItem{
      Id: domainItem.Id,
      CustomEffectText: domainItem.Attributes.CustomEffectText,
      Description: domainItem.Attributes.Description,
      
      IsActive: domainItem.Attributes.IsActive,
      OneHandedQuantifier: domainItem.Attributes.OneHandedQuantifier,
      Title: domainItem.Attributes.Title,
      TwoHandedQuantifier: domainItem.Attributes.TwoHandedQuantifier,
   }
}
