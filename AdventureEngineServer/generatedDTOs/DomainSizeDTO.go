//*** CAUTION ***
//This is an autogenerated file produced by regenerateBackend.py.
//Edits made here will not persist after backend regeneration.

package generatedDTOs

import (
   types "AdventureEngineServer/generatedDatabaseTypes"
   
   
   "gorm.io/gorm"
   "reflect"
   "slices"
)

type DomainSizeDTOAttributes struct {
   BaseHexArea float64
   BaseTileArea float64
   Description *string
   
   IsActive *bool
   SizeOrder float64
   Title *string
}

type DomainSizeDTOManyToOneRelationships struct {
}

type DomainSizeDTOOneToManyRelationships struct {
}

type DomainSizeDTORelationships struct {
   ManyToOne DomainSizeDTOManyToOneRelationships
   OneToMany DomainSizeDTOOneToManyRelationships
}

type DomainSizeDTO struct {
   Id *float64
   
   Attributes DomainSizeDTOAttributes
   
   Relationships DomainSizeDTORelationships
}

func DomainSizeToDomainSizeDTO(db *gorm.DB, domainSize *types.DomainSize, traversedTables []string) *DomainSizeDTO {
   
   if (domainSize == nil) {
      print("No valid pointer passed to DTO conversion for table DomainSize")
      return nil
   }
   
   if (slices.Contains(traversedTables, reflect.TypeOf(*domainSize).Name())) {
      print("Hit circular catch case for table DomainSize\n")
      return nil
   }
   
   traversedTables = append(traversedTables, reflect.TypeOf(*domainSize).Name())
   
   
   
   return &DomainSizeDTO{
      Id: domainSize.Id,
      Attributes: DomainSizeDTOAttributes{
         BaseHexArea: domainSize.BaseHexArea,
         BaseTileArea: domainSize.BaseTileArea,
         Description: domainSize.Description,
         
         IsActive: domainSize.IsActive,
         SizeOrder: domainSize.SizeOrder,
         Title: domainSize.Title,
      },
      Relationships: DomainSizeDTORelationships{
         ManyToOne: DomainSizeDTOManyToOneRelationships {
         },
         OneToMany: DomainSizeDTOOneToManyRelationships {
         },
      },
   }
}

func DomainSizeDTOToDomainSize(domainSize *DomainSizeDTO) types.DomainSize {
   return types.DomainSize{
      Id: domainSize.Id,
      BaseHexArea: domainSize.Attributes.BaseHexArea,
      BaseTileArea: domainSize.Attributes.BaseTileArea,
      Description: domainSize.Attributes.Description,
      
      IsActive: domainSize.Attributes.IsActive,
      SizeOrder: domainSize.Attributes.SizeOrder,
      Title: domainSize.Attributes.Title,
   }
}
