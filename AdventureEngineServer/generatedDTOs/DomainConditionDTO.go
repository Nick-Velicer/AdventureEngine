//*** CAUTION ***
//This is an autogenerated file produced by regenerateBackend.py.
//Edits made here will not persist after backend regeneration.

package generatedDTOs

import (
   types "AdventureEngineServer/generatedDatabaseTypes"
   
   
   "gorm.io/gorm"
   "reflect"
   "slices"
)

type DomainConditionDTOAttributes struct {
   Description *string
   
   IsActive *bool
   Title *string
}

type DomainConditionDTOManyToOneRelationships struct {
}

type DomainConditionDTOOneToManyRelationships struct {
}

type DomainConditionDTORelationships struct {
   ManyToOne DomainConditionDTOManyToOneRelationships
   OneToMany DomainConditionDTOOneToManyRelationships
}

type DomainConditionDTO struct {
   Id *int
   
   Attributes DomainConditionDTOAttributes
   
   Relationships DomainConditionDTORelationships
}

func DomainConditionToDomainConditionDTO(db *gorm.DB, domainCondition *types.DomainCondition, traversedTables []string) *DomainConditionDTO {
   
   if (domainCondition == nil) {
      print("Nil pointer passed to DTO conversion for table DomainCondition\n")
      return nil
   }
   
   if (slices.Contains(traversedTables, reflect.TypeOf(*domainCondition).Name())) {
      print("Hit circular catch case for table DomainCondition\n")
      return nil
   }
   
   traversedTables = append(traversedTables, reflect.TypeOf(*domainCondition).Name())
   
   
   
   return &DomainConditionDTO{
      Id: domainCondition.Id,
      Attributes: DomainConditionDTOAttributes{
         Description: domainCondition.Description,
         
         IsActive: domainCondition.IsActive,
         Title: domainCondition.Title,
      },
      Relationships: DomainConditionDTORelationships{
         ManyToOne: DomainConditionDTOManyToOneRelationships {
         },
         OneToMany: DomainConditionDTOOneToManyRelationships {
         },
      },
   }
}

func DomainConditionDTOToDomainCondition(domainCondition *DomainConditionDTO) types.DomainCondition {
   var tableTypeBuffer types.DomainCondition
   
   tableTypeBuffer.Id = domainCondition.Id
   tableTypeBuffer.Description = domainCondition.Attributes.Description
   
   tableTypeBuffer.IsActive = domainCondition.Attributes.IsActive
   tableTypeBuffer.Title = domainCondition.Attributes.Title
   
   return tableTypeBuffer
}
