//*** CAUTION ***
//This is an autogenerated file produced by regenerateBackend.py.
//Edits made here will not persist after backend regeneration.

package generatedDTOs

import (
   types "AdventureEngineServer/generatedDatabaseTypes"
   
   
   "gorm.io/gorm"
   "reflect"
   "slices"
)

type DomainCreatureTypeDTOAttributes struct {
   Description *string
   
   IsActive *bool
   Title *string
}

type DomainCreatureTypeDTOManyToOneRelationships struct {
}

type DomainCreatureTypeDTOOneToManyRelationships struct {
}

type DomainCreatureTypeDTORelationships struct {
   ManyToOne DomainCreatureTypeDTOManyToOneRelationships
   OneToMany DomainCreatureTypeDTOOneToManyRelationships
}

type DomainCreatureTypeDTO struct {
   Id *int
   
   Attributes DomainCreatureTypeDTOAttributes
   
   Relationships DomainCreatureTypeDTORelationships
}

func DomainCreatureTypeToDomainCreatureTypeDTO(db *gorm.DB, domainCreatureType *types.DomainCreatureType, traversedTables []string) *DomainCreatureTypeDTO {
   
   if (domainCreatureType == nil) {
      print("Nil pointer passed to DTO conversion for table DomainCreatureType\n")
      return nil
   }
   
   if (slices.Contains(traversedTables, reflect.TypeOf(*domainCreatureType).Name())) {
      print("Hit circular catch case for table DomainCreatureType\n")
      return nil
   }
   
   traversedTables = append(traversedTables, reflect.TypeOf(*domainCreatureType).Name())
   
   
   
   return &DomainCreatureTypeDTO{
      Id: domainCreatureType.Id,
      Attributes: DomainCreatureTypeDTOAttributes{
         Description: domainCreatureType.Description,
         
         IsActive: domainCreatureType.IsActive,
         Title: domainCreatureType.Title,
      },
      Relationships: DomainCreatureTypeDTORelationships{
         ManyToOne: DomainCreatureTypeDTOManyToOneRelationships {
         },
         OneToMany: DomainCreatureTypeDTOOneToManyRelationships {
         },
      },
   }
}

func DomainCreatureTypeDTOToDomainCreatureType(domainCreatureType *DomainCreatureTypeDTO) *types.DomainCreatureType {
   var tableTypeBuffer types.DomainCreatureType
   
   tableTypeBuffer.Id = domainCreatureType.Id
   tableTypeBuffer.Description = domainCreatureType.Attributes.Description
   
   tableTypeBuffer.IsActive = domainCreatureType.Attributes.IsActive
   tableTypeBuffer.Title = domainCreatureType.Attributes.Title
   
   return &tableTypeBuffer
}
