//*** CAUTION ***
//This is an autogenerated file produced by regenerateBackend.py.
//Edits made here will not persist after backend regeneration.

package generatedDTOs

import (
   types "AdventureEngineServer/generatedDatabaseTypes"
   
   services "AdventureEngineServer/generatedServices"
   "gorm.io/gorm"
   "reflect"
   "slices"
)

type ClassSaveDTOAttributes struct {
   Description *string
   
   IsActive *bool
   Title *string
}

type ClassSaveDTOManyToOneRelationships struct {
   Class__DomainClass *DomainClassDTO
   Stat__DomainCharacterStat *DomainCharacterStatDTO
}

type ClassSaveDTOOneToManyRelationships struct {
}

type ClassSaveDTORelationships struct {
   ManyToOne ClassSaveDTOManyToOneRelationships
   OneToMany ClassSaveDTOOneToManyRelationships
}

type ClassSaveDTO struct {
   Id *float64
   
   Attributes ClassSaveDTOAttributes
   
   Relationships ClassSaveDTORelationships
}

func ClassSaveToClassSaveDTO(db *gorm.DB, classSave *types.ClassSave, traversedTables []string) *ClassSaveDTO {
   
   if (classSave == nil) {
      print("No valid pointer passed to DTO conversion for table ClassSave")
      return nil
   }
   
   if (slices.Contains(traversedTables, reflect.TypeOf(*classSave).Name())) {
      print("Hit circular catch case for table ClassSave\n")
      return nil
   }
   
   traversedTables = append(traversedTables, reflect.TypeOf(*classSave).Name())
   
   var includedClass__DomainClass types.DomainClass
   var includedStat__DomainCharacterStat types.DomainCharacterStat
   
   if (classSave.Class__DomainClass != nil) {
      services.GetDomainClassById(db, int(*classSave.Class__DomainClass), &includedClass__DomainClass)
   }

   if (classSave.Stat__DomainCharacterStat != nil) {
      services.GetDomainCharacterStatById(db, int(*classSave.Stat__DomainCharacterStat), &includedStat__DomainCharacterStat)
   }

   
   return &ClassSaveDTO{
      Id: classSave.Id,
      Attributes: ClassSaveDTOAttributes{
         Description: classSave.Description,
         
         IsActive: classSave.IsActive,
         Title: classSave.Title,
      },
      Relationships: ClassSaveDTORelationships{
         ManyToOne: ClassSaveDTOManyToOneRelationships {
            Class__DomainClass: DomainClassToDomainClassDTO(db, &includedClass__DomainClass, traversedTables),
            Stat__DomainCharacterStat: DomainCharacterStatToDomainCharacterStatDTO(db, &includedStat__DomainCharacterStat, traversedTables),
         },
         OneToMany: ClassSaveDTOOneToManyRelationships {
         },
      },
   }
}

func ClassSaveDTOToClassSave(classSave *ClassSaveDTO) types.ClassSave {
   return types.ClassSave{
      Id: classSave.Id,
      Description: classSave.Attributes.Description,
      
      IsActive: classSave.Attributes.IsActive,
      Title: classSave.Attributes.Title,
      Class__DomainClass: classSave.Relationships.ManyToOne.Class__DomainClass.Id,
      Stat__DomainCharacterStat: classSave.Relationships.ManyToOne.Stat__DomainCharacterStat.Id,
   }
}
