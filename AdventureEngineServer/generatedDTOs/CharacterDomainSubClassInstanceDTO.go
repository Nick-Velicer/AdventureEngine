//*** CAUTION ***
//This is an autogenerated file produced by regenerateBackend.py.
//Edits made here will not persist after backend regeneration.

package generatedDTOs

import (
   types "AdventureEngineServer/generatedDatabaseTypes"
   
   services "AdventureEngineServer/generatedServices"
   "gorm.io/gorm"
   "reflect"
   "slices"
)

type CharacterDomainSubClassInstanceDTOAttributes struct {
   Description *string
   
   IsActive *bool
   Level float64
   Title *string
}

type CharacterDomainSubClassInstanceDTOManyToOneRelationships struct {
   Character__Character *CharacterDTO
   SubClass__DomainSubClass *DomainSubClassDTO
}

type CharacterDomainSubClassInstanceDTOOneToManyRelationships struct {
}

type CharacterDomainSubClassInstanceDTORelationships struct {
   ManyToOne CharacterDomainSubClassInstanceDTOManyToOneRelationships
   OneToMany CharacterDomainSubClassInstanceDTOOneToManyRelationships
}

type CharacterDomainSubClassInstanceDTO struct {
   Id *int
   
   Attributes CharacterDomainSubClassInstanceDTOAttributes
   
   Relationships CharacterDomainSubClassInstanceDTORelationships
}

func CharacterDomainSubClassInstanceToCharacterDomainSubClassInstanceDTO(db *gorm.DB, characterDomainSubClassInstance *types.CharacterDomainSubClassInstance, traversedTables []string) *CharacterDomainSubClassInstanceDTO {
   
   if (characterDomainSubClassInstance == nil) {
      print("Nil pointer passed to DTO conversion for table CharacterDomainSubClassInstance\n")
      return nil
   }
   
   if (slices.Contains(traversedTables, reflect.TypeOf(*characterDomainSubClassInstance).Name())) {
      print("Hit circular catch case for table CharacterDomainSubClassInstance\n")
      return nil
   }
   
   traversedTables = append(traversedTables, reflect.TypeOf(*characterDomainSubClassInstance).Name())
   
   var includedCharacter__Character *types.Character
   var includedSubClass__DomainSubClass *types.DomainSubClass
   
   if (characterDomainSubClassInstance.Character__Character != nil) {
      services.GetCharacterById(db, int(*characterDomainSubClassInstance.Character__Character), includedCharacter__Character)
   }

   if (characterDomainSubClassInstance.SubClass__DomainSubClass != nil) {
      services.GetDomainSubClassById(db, int(*characterDomainSubClassInstance.SubClass__DomainSubClass), includedSubClass__DomainSubClass)
   }

   
   return &CharacterDomainSubClassInstanceDTO{
      Id: characterDomainSubClassInstance.Id,
      Attributes: CharacterDomainSubClassInstanceDTOAttributes{
         Description: characterDomainSubClassInstance.Description,
         
         IsActive: characterDomainSubClassInstance.IsActive,
         Level: characterDomainSubClassInstance.Level,
         Title: characterDomainSubClassInstance.Title,
      },
      Relationships: CharacterDomainSubClassInstanceDTORelationships{
         ManyToOne: CharacterDomainSubClassInstanceDTOManyToOneRelationships {
            Character__Character: CharacterToCharacterDTO(db, includedCharacter__Character, traversedTables),
            SubClass__DomainSubClass: DomainSubClassToDomainSubClassDTO(db, includedSubClass__DomainSubClass, traversedTables),
         },
         OneToMany: CharacterDomainSubClassInstanceDTOOneToManyRelationships {
         },
      },
   }
}

func CharacterDomainSubClassInstanceDTOToCharacterDomainSubClassInstance(characterDomainSubClassInstance *CharacterDomainSubClassInstanceDTO) *types.CharacterDomainSubClassInstance {
   var tableTypeBuffer types.CharacterDomainSubClassInstance
   
   tableTypeBuffer.Id = characterDomainSubClassInstance.Id
   tableTypeBuffer.Description = characterDomainSubClassInstance.Attributes.Description
   
   tableTypeBuffer.IsActive = characterDomainSubClassInstance.Attributes.IsActive
   tableTypeBuffer.Level = characterDomainSubClassInstance.Attributes.Level
   tableTypeBuffer.Title = characterDomainSubClassInstance.Attributes.Title
   
   if (characterDomainSubClassInstance.Relationships.ManyToOne.Character__Character != nil) {
      tableTypeBuffer.Character__Character = characterDomainSubClassInstance.Relationships.ManyToOne.Character__Character.Id
   }

   if (characterDomainSubClassInstance.Relationships.ManyToOne.SubClass__DomainSubClass != nil) {
      tableTypeBuffer.SubClass__DomainSubClass = characterDomainSubClassInstance.Relationships.ManyToOne.SubClass__DomainSubClass.Id
   }

   return &tableTypeBuffer
}
