// Code generated by github.com/atombender/go-jsonschema, DO NOT EDIT.

package goTypeBase

type QuantifierJson struct {
	// AbbreviatedTitle corresponds to the JSON schema field "AbbreviatedTitle".
	AbbreviatedTitle *string `json:"AbbreviatedTitle,omitempty" yaml:"AbbreviatedTitle,omitempty" mapstructure:"AbbreviatedTitle,omitempty"`

	// AppliesAgainstSource corresponds to the JSON schema field
	// "AppliesAgainstSource".
	AppliesAgainstSource *bool `json:"AppliesAgainstSource,omitempty" yaml:"AppliesAgainstSource,omitempty" mapstructure:"AppliesAgainstSource,omitempty"`

	// AppliesAgainstSourceForTargetsOnly corresponds to the JSON schema field
	// "AppliesAgainstSourceForTargetsOnly".
	AppliesAgainstSourceForTargetsOnly *bool `json:"AppliesAgainstSourceForTargetsOnly,omitempty" yaml:"AppliesAgainstSourceForTargetsOnly,omitempty" mapstructure:"AppliesAgainstSourceForTargetsOnly,omitempty"`

	// AppliesAgainstTargets corresponds to the JSON schema field
	// "AppliesAgainstTargets".
	AppliesAgainstTargets *bool `json:"AppliesAgainstTargets,omitempty" yaml:"AppliesAgainstTargets,omitempty" mapstructure:"AppliesAgainstTargets,omitempty"`

	// AppliesAgainstTargetsForSourceOnly corresponds to the JSON schema field
	// "AppliesAgainstTargetsForSourceOnly".
	AppliesAgainstTargetsForSourceOnly *bool `json:"AppliesAgainstTargetsForSourceOnly,omitempty" yaml:"AppliesAgainstTargetsForSourceOnly,omitempty" mapstructure:"AppliesAgainstTargetsForSourceOnly,omitempty"`

	// AppliesToSource corresponds to the JSON schema field "AppliesToSource".
	AppliesToSource *bool `json:"AppliesToSource,omitempty" yaml:"AppliesToSource,omitempty" mapstructure:"AppliesToSource,omitempty"`

	// AppliesToTargets corresponds to the JSON schema field "AppliesToTargets".
	AppliesToTargets *bool `json:"AppliesToTargets,omitempty" yaml:"AppliesToTargets,omitempty" mapstructure:"AppliesToTargets,omitempty"`

	// AutomaticFailure corresponds to the JSON schema field "AutomaticFailure".
	AutomaticFailure *bool `json:"AutomaticFailure,omitempty" yaml:"AutomaticFailure,omitempty" mapstructure:"AutomaticFailure,omitempty"`

	// DeltaPercentage corresponds to the JSON schema field "DeltaPercentage".
	DeltaPercentage *float64 `json:"DeltaPercentage,omitempty" yaml:"DeltaPercentage,omitempty" mapstructure:"DeltaPercentage,omitempty"`

	// DeltaQuantity corresponds to the JSON schema field "DeltaQuantity".
	DeltaQuantity *float64 `json:"DeltaQuantity,omitempty" yaml:"DeltaQuantity,omitempty" mapstructure:"DeltaQuantity,omitempty"`

	// Description corresponds to the JSON schema field "Description".
	Description *string `json:"Description,omitempty" yaml:"Description,omitempty" mapstructure:"Description,omitempty"`

	// GivesAction corresponds to the JSON schema field "GivesAction".
	GivesAction *bool `json:"GivesAction,omitempty" yaml:"GivesAction,omitempty" mapstructure:"GivesAction,omitempty"`

	// GivesAdvantage corresponds to the JSON schema field "GivesAdvantage".
	GivesAdvantage *bool `json:"GivesAdvantage,omitempty" yaml:"GivesAdvantage,omitempty" mapstructure:"GivesAdvantage,omitempty"`

	// GivesBonusAction corresponds to the JSON schema field "GivesBonusAction".
	GivesBonusAction *bool `json:"GivesBonusAction,omitempty" yaml:"GivesBonusAction,omitempty" mapstructure:"GivesBonusAction,omitempty"`

	// GivesDisadvantage corresponds to the JSON schema field "GivesDisadvantage".
	GivesDisadvantage *bool `json:"GivesDisadvantage,omitempty" yaml:"GivesDisadvantage,omitempty" mapstructure:"GivesDisadvantage,omitempty"`

	// HardSetPercentage corresponds to the JSON schema field "HardSetPercentage".
	HardSetPercentage *float64 `json:"HardSetPercentage,omitempty" yaml:"HardSetPercentage,omitempty" mapstructure:"HardSetPercentage,omitempty"`

	// HardSetQuantity corresponds to the JSON schema field "HardSetQuantity".
	HardSetQuantity *float64 `json:"HardSetQuantity,omitempty" yaml:"HardSetQuantity,omitempty" mapstructure:"HardSetQuantity,omitempty"`

	// Id corresponds to the JSON schema field "Id".
	Id *float64 `json:"Id,omitempty" yaml:"Id,omitempty" mapstructure:"Id,omitempty"`

	// ImpactsMovementAmount corresponds to the JSON schema field
	// "ImpactsMovementAmount".
	ImpactsMovementAmount *bool `json:"ImpactsMovementAmount,omitempty" yaml:"ImpactsMovementAmount,omitempty" mapstructure:"ImpactsMovementAmount,omitempty"`

	// IntoInventory corresponds to the JSON schema field "IntoInventory".
	IntoInventory *bool `json:"IntoInventory,omitempty" yaml:"IntoInventory,omitempty" mapstructure:"IntoInventory,omitempty"`

	// IsAction corresponds to the JSON schema field "IsAction".
	IsAction *bool `json:"IsAction,omitempty" yaml:"IsAction,omitempty" mapstructure:"IsAction,omitempty"`

	// IsActive corresponds to the JSON schema field "IsActive".
	IsActive *bool `json:"IsActive,omitempty" yaml:"IsActive,omitempty" mapstructure:"IsActive,omitempty"`

	// IsBonusAction corresponds to the JSON schema field "IsBonusAction".
	IsBonusAction *bool `json:"IsBonusAction,omitempty" yaml:"IsBonusAction,omitempty" mapstructure:"IsBonusAction,omitempty"`

	// Level1SpellSlots corresponds to the JSON schema field "Level1SpellSlots".
	Level1SpellSlots *float64 `json:"Level1SpellSlots,omitempty" yaml:"Level1SpellSlots,omitempty" mapstructure:"Level1SpellSlots,omitempty"`

	// Level2SpellSlots corresponds to the JSON schema field "Level2SpellSlots".
	Level2SpellSlots *float64 `json:"Level2SpellSlots,omitempty" yaml:"Level2SpellSlots,omitempty" mapstructure:"Level2SpellSlots,omitempty"`

	// Level3SpellSlots corresponds to the JSON schema field "Level3SpellSlots".
	Level3SpellSlots *float64 `json:"Level3SpellSlots,omitempty" yaml:"Level3SpellSlots,omitempty" mapstructure:"Level3SpellSlots,omitempty"`

	// Level4SpellSlots corresponds to the JSON schema field "Level4SpellSlots".
	Level4SpellSlots *float64 `json:"Level4SpellSlots,omitempty" yaml:"Level4SpellSlots,omitempty" mapstructure:"Level4SpellSlots,omitempty"`

	// Level5SpellSlots corresponds to the JSON schema field "Level5SpellSlots".
	Level5SpellSlots *float64 `json:"Level5SpellSlots,omitempty" yaml:"Level5SpellSlots,omitempty" mapstructure:"Level5SpellSlots,omitempty"`

	// Level6SpellSlots corresponds to the JSON schema field "Level6SpellSlots".
	Level6SpellSlots *float64 `json:"Level6SpellSlots,omitempty" yaml:"Level6SpellSlots,omitempty" mapstructure:"Level6SpellSlots,omitempty"`

	// Level7SpellSlots corresponds to the JSON schema field "Level7SpellSlots".
	Level7SpellSlots *float64 `json:"Level7SpellSlots,omitempty" yaml:"Level7SpellSlots,omitempty" mapstructure:"Level7SpellSlots,omitempty"`

	// Level8SpellSlots corresponds to the JSON schema field "Level8SpellSlots".
	Level8SpellSlots *float64 `json:"Level8SpellSlots,omitempty" yaml:"Level8SpellSlots,omitempty" mapstructure:"Level8SpellSlots,omitempty"`

	// Level9SpellSlots corresponds to the JSON schema field "Level9SpellSlots".
	Level9SpellSlots *float64 `json:"Level9SpellSlots,omitempty" yaml:"Level9SpellSlots,omitempty" mapstructure:"Level9SpellSlots,omitempty"`

	// LevelMaximumRequirement corresponds to the JSON schema field
	// "LevelMaximumRequirement".
	LevelMaximumRequirement *float64 `json:"LevelMaximumRequirement,omitempty" yaml:"LevelMaximumRequirement,omitempty" mapstructure:"LevelMaximumRequirement,omitempty"`

	// LevelMinimumRequirement corresponds to the JSON schema field
	// "LevelMinimumRequirement".
	LevelMinimumRequirement *float64 `json:"LevelMinimumRequirement,omitempty" yaml:"LevelMinimumRequirement,omitempty" mapstructure:"LevelMinimumRequirement,omitempty"`

	// ParentDomainAction corresponds to the JSON schema field "Parent__DomainAction".
	ParentDomainAction *float64 `json:"Parent__DomainAction,omitempty" yaml:"Parent__DomainAction,omitempty" mapstructure:"Parent__DomainAction,omitempty"`

	// ParentDomainClass corresponds to the JSON schema field "Parent__DomainClass".
	ParentDomainClass *float64 `json:"Parent__DomainClass,omitempty" yaml:"Parent__DomainClass,omitempty" mapstructure:"Parent__DomainClass,omitempty"`

	// ParentDomainClassTrait corresponds to the JSON schema field
	// "Parent__DomainClassTrait".
	ParentDomainClassTrait *float64 `json:"Parent__DomainClassTrait,omitempty" yaml:"Parent__DomainClassTrait,omitempty" mapstructure:"Parent__DomainClassTrait,omitempty"`

	// ParentDomainCondition corresponds to the JSON schema field
	// "Parent__DomainCondition".
	ParentDomainCondition *float64 `json:"Parent__DomainCondition,omitempty" yaml:"Parent__DomainCondition,omitempty" mapstructure:"Parent__DomainCondition,omitempty"`

	// ParentDomainStaticEffect corresponds to the JSON schema field
	// "Parent__DomainStaticEffect".
	ParentDomainStaticEffect *float64 `json:"Parent__DomainStaticEffect,omitempty" yaml:"Parent__DomainStaticEffect,omitempty" mapstructure:"Parent__DomainStaticEffect,omitempty"`

	// ParentDomainSubClass corresponds to the JSON schema field
	// "Parent__DomainSubClass".
	ParentDomainSubClass *float64 `json:"Parent__DomainSubClass,omitempty" yaml:"Parent__DomainSubClass,omitempty" mapstructure:"Parent__DomainSubClass,omitempty"`

	// Prevents corresponds to the JSON schema field "Prevents".
	Prevents *bool `json:"Prevents,omitempty" yaml:"Prevents,omitempty" mapstructure:"Prevents,omitempty"`

	// QuantityRestoredOnShortRest corresponds to the JSON schema field
	// "QuantityRestoredOnShortRest".
	QuantityRestoredOnShortRest *float64 `json:"QuantityRestoredOnShortRest,omitempty" yaml:"QuantityRestoredOnShortRest,omitempty" mapstructure:"QuantityRestoredOnShortRest,omitempty"`

	// RefreshOnLongRest corresponds to the JSON schema field "RefreshOnLongRest".
	RefreshOnLongRest *bool `json:"RefreshOnLongRest,omitempty" yaml:"RefreshOnLongRest,omitempty" mapstructure:"RefreshOnLongRest,omitempty"`

	// RefreshOnShortRest corresponds to the JSON schema field "RefreshOnShortRest".
	RefreshOnShortRest *bool `json:"RefreshOnShortRest,omitempty" yaml:"RefreshOnShortRest,omitempty" mapstructure:"RefreshOnShortRest,omitempty"`

	// ShouldBeEvaluatedAsModifier corresponds to the JSON schema field
	// "ShouldBeEvaluatedAsModifier".
	ShouldBeEvaluatedAsModifier *bool `json:"ShouldBeEvaluatedAsModifier,omitempty" yaml:"ShouldBeEvaluatedAsModifier,omitempty" mapstructure:"ShouldBeEvaluatedAsModifier,omitempty"`

	// TargetMaximum corresponds to the JSON schema field "TargetMaximum".
	TargetMaximum *float64 `json:"TargetMaximum,omitempty" yaml:"TargetMaximum,omitempty" mapstructure:"TargetMaximum,omitempty"`

	// TargetMinimum corresponds to the JSON schema field "TargetMinimum".
	TargetMinimum *float64 `json:"TargetMinimum,omitempty" yaml:"TargetMinimum,omitempty" mapstructure:"TargetMinimum,omitempty"`

	// TargetDomainAction corresponds to the JSON schema field "Target__DomainAction".
	TargetDomainAction *float64 `json:"Target__DomainAction,omitempty" yaml:"Target__DomainAction,omitempty" mapstructure:"Target__DomainAction,omitempty"`

	// TargetDomainCharacterStat corresponds to the JSON schema field
	// "Target__DomainCharacterStat".
	TargetDomainCharacterStat *float64 `json:"Target__DomainCharacterStat,omitempty" yaml:"Target__DomainCharacterStat,omitempty" mapstructure:"Target__DomainCharacterStat,omitempty"`

	// TargetDomainCondition corresponds to the JSON schema field
	// "Target__DomainCondition".
	TargetDomainCondition *float64 `json:"Target__DomainCondition,omitempty" yaml:"Target__DomainCondition,omitempty" mapstructure:"Target__DomainCondition,omitempty"`

	// TargetDomainDamageType corresponds to the JSON schema field
	// "Target__DomainDamageType".
	TargetDomainDamageType *float64 `json:"Target__DomainDamageType,omitempty" yaml:"Target__DomainDamageType,omitempty" mapstructure:"Target__DomainDamageType,omitempty"`

	// TargetDomainDiceRollSubType corresponds to the JSON schema field
	// "Target__DomainDiceRollSubType".
	TargetDomainDiceRollSubType *float64 `json:"Target__DomainDiceRollSubType,omitempty" yaml:"Target__DomainDiceRollSubType,omitempty" mapstructure:"Target__DomainDiceRollSubType,omitempty"`

	// TargetDomainDiceRollType corresponds to the JSON schema field
	// "Target__DomainDiceRollType".
	TargetDomainDiceRollType *float64 `json:"Target__DomainDiceRollType,omitempty" yaml:"Target__DomainDiceRollType,omitempty" mapstructure:"Target__DomainDiceRollType,omitempty"`

	// TargetDomainSpell corresponds to the JSON schema field "Target__DomainSpell".
	TargetDomainSpell *float64 `json:"Target__DomainSpell,omitempty" yaml:"Target__DomainSpell,omitempty" mapstructure:"Target__DomainSpell,omitempty"`

	// TargetDomainStaticEffect corresponds to the JSON schema field
	// "Target__DomainStaticEffect".
	TargetDomainStaticEffect *float64 `json:"Target__DomainStaticEffect,omitempty" yaml:"Target__DomainStaticEffect,omitempty" mapstructure:"Target__DomainStaticEffect,omitempty"`

	// Title corresponds to the JSON schema field "Title".
	Title *string `json:"Title,omitempty" yaml:"Title,omitempty" mapstructure:"Title,omitempty"`

	// UntilLongRest corresponds to the JSON schema field "UntilLongRest".
	UntilLongRest *bool `json:"UntilLongRest,omitempty" yaml:"UntilLongRest,omitempty" mapstructure:"UntilLongRest,omitempty"`

	// UntilShortRest corresponds to the JSON schema field "UntilShortRest".
	UntilShortRest *bool `json:"UntilShortRest,omitempty" yaml:"UntilShortRest,omitempty" mapstructure:"UntilShortRest,omitempty"`
}
