// Code generated by github.com/atombender/go-jsonschema, DO NOT EDIT.

package goTypeBase

type CharacterDomainCharacterStatInstanceJson struct {
	// AbbreviatedTitle corresponds to the JSON schema field "AbbreviatedTitle".
	AbbreviatedTitle *string `json:"AbbreviatedTitle,omitempty" yaml:"AbbreviatedTitle,omitempty" mapstructure:"AbbreviatedTitle,omitempty"`

	// CharacterCharacter corresponds to the JSON schema field "Character__Character".
	CharacterCharacter *float64 `json:"Character__Character,omitempty" yaml:"Character__Character,omitempty" mapstructure:"Character__Character,omitempty"`

	// Description corresponds to the JSON schema field "Description".
	Description *string `json:"Description,omitempty" yaml:"Description,omitempty" mapstructure:"Description,omitempty"`

	// Id corresponds to the JSON schema field "Id".
	Id *float64 `json:"Id,omitempty" yaml:"Id,omitempty" mapstructure:"Id,omitempty"`

	// IsActive corresponds to the JSON schema field "IsActive".
	IsActive *bool `json:"IsActive,omitempty" yaml:"IsActive,omitempty" mapstructure:"IsActive,omitempty"`

	// StatDomainCharacterStat corresponds to the JSON schema field
	// "Stat__DomainCharacterStat".
	StatDomainCharacterStat *float64 `json:"Stat__DomainCharacterStat,omitempty" yaml:"Stat__DomainCharacterStat,omitempty" mapstructure:"Stat__DomainCharacterStat,omitempty"`

	// Title corresponds to the JSON schema field "Title".
	Title *string `json:"Title,omitempty" yaml:"Title,omitempty" mapstructure:"Title,omitempty"`

	// Value corresponds to the JSON schema field "Value".
	Value float64 `json:"Value" yaml:"Value" mapstructure:"Value"`
}
