// Code generated by github.com/atombender/go-jsonschema, DO NOT EDIT.

package goTypeBase

import "encoding/json"
import "fmt"

type DomainSizeJson struct {
	// BaseHexArea corresponds to the JSON schema field "BaseHexArea".
	BaseHexArea float64 `json:"BaseHexArea" yaml:"BaseHexArea" mapstructure:"BaseHexArea"`

	// BaseTileArea corresponds to the JSON schema field "BaseTileArea".
	BaseTileArea float64 `json:"BaseTileArea" yaml:"BaseTileArea" mapstructure:"BaseTileArea"`

	// Description corresponds to the JSON schema field "Description".
	Description *string `json:"Description,omitempty" yaml:"Description,omitempty" mapstructure:"Description,omitempty"`

	// IsActive corresponds to the JSON schema field "IsActive".
	IsActive *bool `json:"IsActive,omitempty" yaml:"IsActive,omitempty" mapstructure:"IsActive,omitempty"`

	// SizeOrder corresponds to the JSON schema field "SizeOrder".
	SizeOrder float64 `json:"SizeOrder" yaml:"SizeOrder" mapstructure:"SizeOrder"`

	// Title corresponds to the JSON schema field "Title".
	Title *string `json:"Title,omitempty" yaml:"Title,omitempty" mapstructure:"Title,omitempty"`

	// Id corresponds to the JSON schema field "id".
	Id *float64 `json:"id,omitempty" yaml:"id,omitempty" mapstructure:"id,omitempty"`
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *DomainSizeJson) UnmarshalJSON(b []byte) error {
	var raw map[string]interface{}
	if err := json.Unmarshal(b, &raw); err != nil {
		return err
	}
	if _, ok := raw["BaseHexArea"]; raw != nil && !ok {
		return fmt.Errorf("field BaseHexArea in DomainSizeJson: required")
	}
	if _, ok := raw["BaseTileArea"]; raw != nil && !ok {
		return fmt.Errorf("field BaseTileArea in DomainSizeJson: required")
	}
	if _, ok := raw["SizeOrder"]; raw != nil && !ok {
		return fmt.Errorf("field SizeOrder in DomainSizeJson: required")
	}
	type Plain DomainSizeJson
	var plain Plain
	if err := json.Unmarshal(b, &plain); err != nil {
		return err
	}
	*j = DomainSizeJson(plain)
	return nil
}
