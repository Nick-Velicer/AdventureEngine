// Code generated by github.com/atombender/go-jsonschema, DO NOT EDIT.

package main

import "encoding/json"
import "fmt"

type QuantifierJson struct {
	// Attributes corresponds to the JSON schema field "attributes".
	Attributes TitleStringUndefinedDescriptionStringUndefinedQuantityNumberUndefinedDeltaNumberUndefinedRefreshOnShortRestBooleanUndefinedRefreshOnLongRestBooleanUndefinedUntilShortRestBooleanUndefinedUntilLongRestBooleanUndefinedLevelMinimumRequirementNumberUndefinedLevelMaximumRequirementNumberUndefinedImpactsSelfBooleanUndefinedIntoInventoryBooleanUndefinedIsActionBooleanUndefinedIsBonusActionBooleanUndefinedLevel1SpellSlotsNumberUndefinedLevel2SpellSlotsNumberUndefinedLevel3SpellSlotsNumberUndefinedLevel4SpellSlotsNumberUndefinedLevel5SpellSlotsNumberUndefinedLevel6SpellSlotsNumberUndefinedLevel7SpellSlotsNumberUndefinedLevel8SpellSlotsNumberUndefinedLevel9SpellSlotsNumberUndefined `json:"attributes" yaml:"attributes" mapstructure:"attributes"`

	// Id corresponds to the JSON schema field "id".
	Id *string `json:"id,omitempty" yaml:"id,omitempty" mapstructure:"id,omitempty"`

	// Relationships corresponds to the JSON schema field "relationships".
	Relationships XStringStringEffectDomainEffectIdStringUndefinedActionDomainActionIdStringUndefinedTargetDomainCharacterSkillIdStringUndefinedTargetDomainCharacterStatIdStringUndefinedAddedSpellDomainSpellIdStringUndefinedConditionDomainConditionIdStringUndefinedDamageTypeDomainDamageTypeIdStringUndefinedResistanceTypeDomainDamageTypeIdStringUndefinedSaveDomainCharacterStatIdStringUndefinedItemDomainItemIdStringUndefinedDiceDomainDiceIdStringUndefined `json:"relationships" yaml:"relationships" mapstructure:"relationships"`
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *QuantifierJson) UnmarshalJSON(b []byte) error {
	var raw map[string]interface{}
	if err := json.Unmarshal(b, &raw); err != nil {
		return err
	}
	if _, ok := raw["attributes"]; raw != nil && !ok {
		return fmt.Errorf("field attributes in QuantifierJson: required")
	}
	if _, ok := raw["relationships"]; raw != nil && !ok {
		return fmt.Errorf("field relationships in QuantifierJson: required")
	}
	type Plain QuantifierJson
	var plain Plain
	if err := json.Unmarshal(b, &plain); err != nil {
		return err
	}
	*j = QuantifierJson(plain)
	return nil
}

type TitleStringUndefinedDescriptionStringUndefinedQuantityNumberUndefinedDeltaNumberUndefinedRefreshOnShortRestBooleanUndefinedRefreshOnLongRestBooleanUndefinedUntilShortRestBooleanUndefinedUntilLongRestBooleanUndefinedLevelMinimumRequirementNumberUndefinedLevelMaximumRequirementNumberUndefinedImpactsSelfBooleanUndefinedIntoInventoryBooleanUndefinedIsActionBooleanUndefinedIsBonusActionBooleanUndefinedLevel1SpellSlotsNumberUndefinedLevel2SpellSlotsNumberUndefinedLevel3SpellSlotsNumberUndefinedLevel4SpellSlotsNumberUndefinedLevel5SpellSlotsNumberUndefinedLevel6SpellSlotsNumberUndefinedLevel7SpellSlotsNumberUndefinedLevel8SpellSlotsNumberUndefinedLevel9SpellSlotsNumberUndefined struct {
	// Delta corresponds to the JSON schema field "delta".
	Delta *float64 `json:"delta,omitempty" yaml:"delta,omitempty" mapstructure:"delta,omitempty"`

	// Description corresponds to the JSON schema field "description".
	Description *string `json:"description,omitempty" yaml:"description,omitempty" mapstructure:"description,omitempty"`

	// ImpactsSelf corresponds to the JSON schema field "impactsSelf".
	ImpactsSelf *bool `json:"impactsSelf,omitempty" yaml:"impactsSelf,omitempty" mapstructure:"impactsSelf,omitempty"`

	// IntoInventory corresponds to the JSON schema field "intoInventory".
	IntoInventory *bool `json:"intoInventory,omitempty" yaml:"intoInventory,omitempty" mapstructure:"intoInventory,omitempty"`

	// IsAction corresponds to the JSON schema field "isAction".
	IsAction *bool `json:"isAction,omitempty" yaml:"isAction,omitempty" mapstructure:"isAction,omitempty"`

	// IsBonusAction corresponds to the JSON schema field "isBonusAction".
	IsBonusAction *bool `json:"isBonusAction,omitempty" yaml:"isBonusAction,omitempty" mapstructure:"isBonusAction,omitempty"`

	// Level1SpellSlots corresponds to the JSON schema field "level1SpellSlots".
	Level1SpellSlots *float64 `json:"level1SpellSlots,omitempty" yaml:"level1SpellSlots,omitempty" mapstructure:"level1SpellSlots,omitempty"`

	// Level2SpellSlots corresponds to the JSON schema field "level2SpellSlots".
	Level2SpellSlots *float64 `json:"level2SpellSlots,omitempty" yaml:"level2SpellSlots,omitempty" mapstructure:"level2SpellSlots,omitempty"`

	// Level3SpellSlots corresponds to the JSON schema field "level3SpellSlots".
	Level3SpellSlots *float64 `json:"level3SpellSlots,omitempty" yaml:"level3SpellSlots,omitempty" mapstructure:"level3SpellSlots,omitempty"`

	// Level4SpellSlots corresponds to the JSON schema field "level4SpellSlots".
	Level4SpellSlots *float64 `json:"level4SpellSlots,omitempty" yaml:"level4SpellSlots,omitempty" mapstructure:"level4SpellSlots,omitempty"`

	// Level5SpellSlots corresponds to the JSON schema field "level5SpellSlots".
	Level5SpellSlots *float64 `json:"level5SpellSlots,omitempty" yaml:"level5SpellSlots,omitempty" mapstructure:"level5SpellSlots,omitempty"`

	// Level6SpellSlots corresponds to the JSON schema field "level6SpellSlots".
	Level6SpellSlots *float64 `json:"level6SpellSlots,omitempty" yaml:"level6SpellSlots,omitempty" mapstructure:"level6SpellSlots,omitempty"`

	// Level7SpellSlots corresponds to the JSON schema field "level7SpellSlots".
	Level7SpellSlots *float64 `json:"level7SpellSlots,omitempty" yaml:"level7SpellSlots,omitempty" mapstructure:"level7SpellSlots,omitempty"`

	// Level8SpellSlots corresponds to the JSON schema field "level8SpellSlots".
	Level8SpellSlots *float64 `json:"level8SpellSlots,omitempty" yaml:"level8SpellSlots,omitempty" mapstructure:"level8SpellSlots,omitempty"`

	// Level9SpellSlots corresponds to the JSON schema field "level9SpellSlots".
	Level9SpellSlots *float64 `json:"level9SpellSlots,omitempty" yaml:"level9SpellSlots,omitempty" mapstructure:"level9SpellSlots,omitempty"`

	// LevelMaximumRequirement corresponds to the JSON schema field
	// "levelMaximumRequirement".
	LevelMaximumRequirement *float64 `json:"levelMaximumRequirement,omitempty" yaml:"levelMaximumRequirement,omitempty" mapstructure:"levelMaximumRequirement,omitempty"`

	// LevelMinimumRequirement corresponds to the JSON schema field
	// "levelMinimumRequirement".
	LevelMinimumRequirement *float64 `json:"levelMinimumRequirement,omitempty" yaml:"levelMinimumRequirement,omitempty" mapstructure:"levelMinimumRequirement,omitempty"`

	// Quantity corresponds to the JSON schema field "quantity".
	Quantity *float64 `json:"quantity,omitempty" yaml:"quantity,omitempty" mapstructure:"quantity,omitempty"`

	// RefreshOnLongRest corresponds to the JSON schema field "refreshOnLongRest".
	RefreshOnLongRest *bool `json:"refreshOnLongRest,omitempty" yaml:"refreshOnLongRest,omitempty" mapstructure:"refreshOnLongRest,omitempty"`

	// RefreshOnShortRest corresponds to the JSON schema field "refreshOnShortRest".
	RefreshOnShortRest *bool `json:"refreshOnShortRest,omitempty" yaml:"refreshOnShortRest,omitempty" mapstructure:"refreshOnShortRest,omitempty"`

	// Title corresponds to the JSON schema field "title".
	Title *string `json:"title,omitempty" yaml:"title,omitempty" mapstructure:"title,omitempty"`

	// UntilLongRest corresponds to the JSON schema field "untilLongRest".
	UntilLongRest *bool `json:"untilLongRest,omitempty" yaml:"untilLongRest,omitempty" mapstructure:"untilLongRest,omitempty"`

	// UntilShortRest corresponds to the JSON schema field "untilShortRest".
	UntilShortRest *bool `json:"untilShortRest,omitempty" yaml:"untilShortRest,omitempty" mapstructure:"untilShortRest,omitempty"`
}

type XStringStringEffectDomainEffectIdStringUndefinedActionDomainActionIdStringUndefinedTargetDomainCharacterSkillIdStringUndefinedTargetDomainCharacterStatIdStringUndefinedAddedSpellDomainSpellIdStringUndefinedConditionDomainConditionIdStringUndefinedDamageTypeDomainDamageTypeIdStringUndefinedResistanceTypeDomainDamageTypeIdStringUndefinedSaveDomainCharacterStatIdStringUndefinedItemDomainItemIdStringUndefinedDiceDomainDiceIdStringUndefined struct {
	// ActionDomainActionId corresponds to the JSON schema field
	// "action__domainActionId".
	ActionDomainActionId *string `json:"action__domainActionId,omitempty" yaml:"action__domainActionId,omitempty" mapstructure:"action__domainActionId,omitempty"`

	// AddedSpellDomainSpellId corresponds to the JSON schema field
	// "addedSpell__domainSpellId".
	AddedSpellDomainSpellId *string `json:"addedSpell__domainSpellId,omitempty" yaml:"addedSpell__domainSpellId,omitempty" mapstructure:"addedSpell__domainSpellId,omitempty"`

	// ConditionDomainConditionId corresponds to the JSON schema field
	// "condition__domainConditionId".
	ConditionDomainConditionId *string `json:"condition__domainConditionId,omitempty" yaml:"condition__domainConditionId,omitempty" mapstructure:"condition__domainConditionId,omitempty"`

	// DamageTypeDomainDamageTypeId corresponds to the JSON schema field
	// "damageType__domainDamageTypeId".
	DamageTypeDomainDamageTypeId *string `json:"damageType__domainDamageTypeId,omitempty" yaml:"damageType__domainDamageTypeId,omitempty" mapstructure:"damageType__domainDamageTypeId,omitempty"`

	// DiceDomainDiceId corresponds to the JSON schema field "dice__domainDiceId".
	DiceDomainDiceId *string `json:"dice__domainDiceId,omitempty" yaml:"dice__domainDiceId,omitempty" mapstructure:"dice__domainDiceId,omitempty"`

	// EffectDomainEffectId corresponds to the JSON schema field
	// "effect__domainEffectId".
	EffectDomainEffectId *string `json:"effect__domainEffectId,omitempty" yaml:"effect__domainEffectId,omitempty" mapstructure:"effect__domainEffectId,omitempty"`

	// ItemDomainItemId corresponds to the JSON schema field "item__domainItemId".
	ItemDomainItemId *string `json:"item__domainItemId,omitempty" yaml:"item__domainItemId,omitempty" mapstructure:"item__domainItemId,omitempty"`

	// ResistanceTypeDomainDamageTypeId corresponds to the JSON schema field
	// "resistanceType__domainDamageTypeId".
	ResistanceTypeDomainDamageTypeId *string `json:"resistanceType__domainDamageTypeId,omitempty" yaml:"resistanceType__domainDamageTypeId,omitempty" mapstructure:"resistanceType__domainDamageTypeId,omitempty"`

	// SaveDomainCharacterStatId corresponds to the JSON schema field
	// "save__domainCharacterStatId".
	SaveDomainCharacterStatId *string `json:"save__domainCharacterStatId,omitempty" yaml:"save__domainCharacterStatId,omitempty" mapstructure:"save__domainCharacterStatId,omitempty"`

	// TargetDomainCharacterSkillId corresponds to the JSON schema field
	// "target__domainCharacterSkillId".
	TargetDomainCharacterSkillId *string `json:"target__domainCharacterSkillId,omitempty" yaml:"target__domainCharacterSkillId,omitempty" mapstructure:"target__domainCharacterSkillId,omitempty"`

	// TargetDomainCharacterStatId corresponds to the JSON schema field
	// "target__domainCharacterStatId".
	TargetDomainCharacterStatId *string `json:"target__domainCharacterStatId,omitempty" yaml:"target__domainCharacterStatId,omitempty" mapstructure:"target__domainCharacterStatId,omitempty"`
}
