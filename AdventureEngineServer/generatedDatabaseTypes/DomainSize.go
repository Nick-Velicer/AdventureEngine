// Code generated by github.com/atombender/go-jsonschema, DO NOT EDIT.

package generatedDatabaseTypes

import "encoding/json"
import "fmt"

type DomainSize struct {
	// BaseHexArea corresponds to the JSON schema field "baseHexArea".
	BaseHexArea float64 `json:"baseHexArea" yaml:"baseHexArea" mapstructure:"baseHexArea"`

	// BaseTileArea corresponds to the JSON schema field "baseTileArea".
	BaseTileArea float64 `json:"baseTileArea" yaml:"baseTileArea" mapstructure:"baseTileArea"`

	// Description corresponds to the JSON schema field "description".
	Description *string `json:"description,omitempty" yaml:"description,omitempty" mapstructure:"description,omitempty"`

	// Id corresponds to the JSON schema field "id".
	Id *float64 `json:"id,omitempty" yaml:"id,omitempty" mapstructure:"id,omitempty"`

	// IsActive corresponds to the JSON schema field "isActive".
	IsActive *bool `json:"isActive,omitempty" yaml:"isActive,omitempty" mapstructure:"isActive,omitempty"`

	// SizeOrder corresponds to the JSON schema field "sizeOrder".
	SizeOrder float64 `json:"sizeOrder" yaml:"sizeOrder" mapstructure:"sizeOrder"`

	// Title corresponds to the JSON schema field "title".
	Title *string `json:"title,omitempty" yaml:"title,omitempty" mapstructure:"title,omitempty"`
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *DomainSize) UnmarshalJSON(value []byte) error {
	var raw map[string]interface{}
	if err := json.Unmarshal(value, &raw); err != nil {
		return err
	}
	if _, ok := raw["baseHexArea"]; raw != nil && !ok {
		return fmt.Errorf("field baseHexArea in DomainSize: required")
	}
	if _, ok := raw["baseTileArea"]; raw != nil && !ok {
		return fmt.Errorf("field baseTileArea in DomainSize: required")
	}
	if _, ok := raw["sizeOrder"]; raw != nil && !ok {
		return fmt.Errorf("field sizeOrder in DomainSize: required")
	}
	type Plain DomainSize
	var plain Plain
	if err := json.Unmarshal(value, &plain); err != nil {
		return err
	}
	*j = DomainSize(plain)
	return nil
}
