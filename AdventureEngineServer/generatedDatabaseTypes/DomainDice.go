// Code generated by github.com/atombender/go-jsonschema, DO NOT EDIT.

package generatedDatabaseTypes

import "encoding/json"
import "fmt"

type DomainDice struct {
	// Description corresponds to the JSON schema field "Description".
	Description *string `json:"Description,omitempty" yaml:"Description,omitempty" mapstructure:"Description,omitempty"`

	// IsActive corresponds to the JSON schema field "IsActive".
	IsActive *bool `json:"IsActive,omitempty" yaml:"IsActive,omitempty" mapstructure:"IsActive,omitempty"`

	// Maximum corresponds to the JSON schema field "Maximum".
	Maximum float64 `json:"Maximum" yaml:"Maximum" mapstructure:"Maximum"`

	// Minimum corresponds to the JSON schema field "Minimum".
	Minimum float64 `json:"Minimum" yaml:"Minimum" mapstructure:"Minimum"`

	// Title corresponds to the JSON schema field "Title".
	Title *string `json:"Title,omitempty" yaml:"Title,omitempty" mapstructure:"Title,omitempty"`

	// Id corresponds to the JSON schema field "id".
	Id *float64 `json:"id,omitempty" yaml:"id,omitempty" mapstructure:"id,omitempty"`
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *DomainDice) UnmarshalJSON(value []byte) error {
	var raw map[string]interface{}
	if err := json.Unmarshal(value, &raw); err != nil {
		return err
	}
	if _, ok := raw["Maximum"]; raw != nil && !ok {
		return fmt.Errorf("field Maximum in DomainDice: required")
	}
	if _, ok := raw["Minimum"]; raw != nil && !ok {
		return fmt.Errorf("field Minimum in DomainDice: required")
	}
	type Plain DomainDice
	var plain Plain
	if err := json.Unmarshal(value, &plain); err != nil {
		return err
	}
	*j = DomainDice(plain)
	return nil
}
